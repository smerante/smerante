{
    "pipes": [
        {
            "name": "SMDatePipe",
            "id": "pipe-SMDatePipe-03d22e1eaa3d426360bb33c6c3ac820c",
            "file": "projects/components/src/lib/components/datepicker/sm-date.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string | number | Moment"
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string | number | Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "format",
                            "type": "string",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "smDate",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { isNumber } from 'util';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\n@Pipe({ name: 'smDate' })\r\nexport class SMDatePipe implements PipeTransform {\r\n  transform(date: Date | string | number | Moment, format?: string) {\r\n    format = format ? format : 'll';\r\n    if (moment.isMoment(date)) {\r\n      return date.format(format);\r\n    } else if (date instanceof Date) {\r\n      return moment(date).format(format);\r\n    } else if (typeof date === 'number') {\r\n      return moment.utc(date).format(format);\r\n    } else {\r\n      return date;\r\n    }\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "CalendarDay",
            "id": "interface-CalendarDay-9f7b716a413cfc15f59ffa367fb6fe9a",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
            "type": "interface",
            "sourceCode": "import { DatePickerDisableDateFilter } from './../../date.filters';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChildren,\r\n  QueryList,\r\n  HostBinding,\r\n  Directive\r\n} from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'button[smCalendarDay], button[sm-day-view-date]'\r\n})\r\nexport class SMDayViewDate {\r\n  @HostBinding('class.calendar-day-view-days') readonly defaultHostClass = true;\r\n  /**  @deprecated since 1.14.0, sm-day-view-date replaced by smCalendarDay */\r\n  @Input('sm-day-view-date')\r\n  set calendarDay(value: CalendarDay) {\r\n    this.smCalendarDay = value;\r\n  }\r\n  get calendarDay() {\r\n    return this.smCalendarDay;\r\n  }\r\n\r\n  @Input() smCalendarDay: CalendarDay;\r\n\r\n\r\n  constructor(\r\n    private host: ElementRef\r\n){}\r\n\r\n  @HostBinding('class.notInMonth') get getnotInMonth() {\r\n    return !this.smCalendarDay.inMonth;\r\n  }\r\n\r\n  @HostBinding('class.today') get getToday() {\r\n    return this.smCalendarDay.isToday;\r\n  }\r\n\r\n  @HostBinding('attr.tabindex') get getTabIndex() {\r\n    return this.smCalendarDay.tabIndex;\r\n  }\r\n\r\n  @HostBinding('class.fromDate') get getFromDate() {\r\n    return this.smCalendarDay.isFromDate;\r\n  }\r\n\r\n  @HostBinding('class.toDate') get getToDate() {\r\n    return this.smCalendarDay.isToDate;\r\n  }\r\n\r\n  @HostBinding('class.last-of-week') get getlastOfWeek() {\r\n    return this.smCalendarDay.isLastOfWeek;\r\n  }\r\n\r\n  @HostBinding('class.inRange') get getInRange() {\r\n    return this.smCalendarDay.isInRange;\r\n  }\r\n\r\n  @HostBinding('class.disabled-focused') get getDisabledFocused() {\r\n    return this.smCalendarDay.disabledFocused;\r\n  }\r\n\r\n  @HostBinding('class.date-selected') get getLastSelectedDate() {\r\n    return this.smCalendarDay.lastSelectedDate;\r\n  }\r\n\r\n  focus() {\r\n    (<HTMLElement>this.host.nativeElement).focus();\r\n  }\r\n}\r\n\r\nconst moment = moment_;\r\n\r\nexport interface CalendarDay {\r\n  dateID: string;\r\n  date: Moment;\r\n  inMonth: boolean;\r\n  isToday: boolean;\r\n  isFromDate: boolean;\r\n  isInRangeFromDate?: boolean;\r\n  isToDate: boolean;\r\n  isLastOfWeek: boolean;\r\n  isInRange: boolean;\r\n  tabIndex: number;\r\n  disabled: boolean;\r\n  disabledFocused: boolean;\r\n  lastSelectedDate: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-calendar-day-view',\r\n  templateUrl: './calendar-day-view.component.html'\r\n})\r\nexport class CalendarDayViewComponent {\r\n  @HostBinding('class.sm-date-picker-calendar-day-view')\r\n  readonly defaultHostClass = true;\r\n\r\n  private _date: Moment;\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(date: Moment) {\r\n    if (date) {\r\n      this._date = date;\r\n      this.internalDate = date;\r\n    }\r\n  }\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    if (date) {\r\n      this._internalDate = date;\r\n      this.setupMonth(\r\n        this.internalDate,\r\n        this.internalDate.month(),\r\n        this.internalDate.year()\r\n      );\r\n      this.setupTabIndex();\r\n    }\r\n  }\r\n\r\n  private _viewOpened = false;\r\n  @Input()\r\n  get viewOpened(): boolean {\r\n    return this._viewOpened;\r\n  }\r\n  set viewOpened(isOpen: boolean) {\r\n    this._viewOpened = isOpen;\r\n    this.focusOnDate();\r\n  }\r\n\r\n  @Input()\r\n  set calendarOpened(isOpen: boolean) {\r\n    if (!isOpen && this.date) {\r\n      this.internalDate = this.date.clone();\r\n      this.internalDateChange.emit(this.internalDate);\r\n    }\r\n  }\r\n\r\n  private _fromDate: Moment;\r\n\r\n  @Input()\r\n  set fromDate(val: Moment) {\r\n    this._fromDate = val;\r\n  }\r\n  get fromDate() {\r\n    return this._fromDate;\r\n  }\r\n  private _toDate: Moment;\r\n\r\n  @Input()\r\n  set toDate(val: Moment) {\r\n    this._toDate = val;\r\n    if (\r\n      this._toDate &&\r\n      this._fromDate &&\r\n      this._toDate.isSame(this._fromDate, 'day')\r\n    )\r\n      this._toDate = this._toDate.add(1, 'day').clone();\r\n  }\r\n  get toDate() {\r\n    return this._toDate;\r\n  }\r\n\r\n  private _disableDateFilter: DatePickerDisableDateFilter;\r\n  @Input()\r\n  set disableDateFilter(callBackFunction: DatePickerDisableDateFilter) {\r\n    this._disableDateFilter = callBackFunction;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get disableDateFilter(): DatePickerDisableDateFilter {\r\n    return this._disableDateFilter;\r\n  }\r\n\r\n  @Input() dayView = false;\r\n  @Input() dayViewID: string;\r\n  @Input() range = false;\r\n\r\n  private _min: number;\r\n  @Input()\r\n  set min(min: number) {\r\n    this._min = min;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get min(): number {\r\n    return this._min;\r\n  }\r\n\r\n  private _max: number;\r\n  @Input()\r\n  set max(max: number) {\r\n    this._max = max;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  @Output() dateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n  @Output() dateSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @Output() fromDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() toDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @ViewChildren(SMDayViewDate) dayButtons: QueryList<SMDayViewDate>;\r\n\r\n  lastSelectedDate: Moment = moment();\r\n  hoverDate: Moment = moment();\r\n  currentDateID: string;\r\n  selectingFromDate = true;\r\n\r\n  daysInMonth: Array<CalendarDay> = [];\r\n  currentFocusDateIndex: number;\r\n\r\n  constructor() {}\r\n\r\n  isValidNewDate(newDate: Moment): boolean {\r\n    if (!this.validBounds(newDate)) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  validBounds(newDate: Moment): boolean {\r\n    return newDate.isBetween(this.min, this.max, 'day', '[]');\r\n  }\r\n\r\n  resetDP() {\r\n    this._date = null;\r\n    this._fromDate = null;\r\n    this._toDate = null;\r\n    this._viewOpened = false;\r\n    this.dayView = false;\r\n    this.internalDate = moment();\r\n  }\r\n\r\n  updateOnDateChange(date: Moment, keyBoardInteraction?: boolean) {\r\n    if (!keyBoardInteraction) this.internalDate = date.clone();\r\n    this.lastSelectedDate = this.internalDate;\r\n    this.currentDateID =\r\n      this.dayViewID +\r\n      '-' +\r\n      this.lastSelectedDate.month() +\r\n      '-' +\r\n      this.lastSelectedDate.date();\r\n\r\n    if (!keyBoardInteraction) this.setupMonth(date, date.month(), date.year());\r\n    this.updateMonths(date, keyBoardInteraction);\r\n    if (keyBoardInteraction) this.focusOnDate();\r\n  }\r\n\r\n  focusOnDate() {\r\n    setTimeout(() => {\r\n      if (this.dayButtons.toArray()[this.currentFocusDateIndex]) {\r\n        this.dayButtons.toArray()[this.currentFocusDateIndex].focus();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /*\r\n    Sets up the month based on sunday being first day of week to Sat being last day of week\r\n  */\r\n  setupMonth(date: Moment, month: number, year: number) {\r\n    const momentDay = moment()\r\n      .locale(date.locale())\r\n      .month(month)\r\n      .year(year);\r\n    const dayOfMonth = momentDay\r\n      .clone()\r\n      .startOf('month')\r\n      .startOf('week');\r\n    const endOfMonth = momentDay\r\n      .clone()\r\n      .endOf('month')\r\n      .endOf('week');\r\n    this.daysInMonth = [];\r\n    let index = 0;\r\n    while (dayOfMonth.clone().isSameOrBefore(endOfMonth)) {\r\n      const inMonth =\r\n        dayOfMonth.isSameOrAfter(momentDay.clone().startOf('month')) &&\r\n        dayOfMonth.isSameOrBefore(momentDay.clone().endOf('month'));\r\n      const isToday = dayOfMonth.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && dayOfMonth.isSame(this.fromDate, 'day');\r\n      const isToDate =\r\n        this.range && this.toDate && dayOfMonth.isSame(this.toDate, 'day');\r\n      const isLastOfWeek = dayOfMonth.weekday() === 6;\r\n\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n\r\n      const isInRange =\r\n        this.range &&\r\n        (dayOfMonth.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            dayOfMonth.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? dayOfMonth.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + dayOfMonth.month() + '-' + dayOfMonth.date()\r\n        : '';\r\n      let disabled = this.isDateDisabled(dayOfMonth);\r\n\r\n      let disabledFocused = false;\r\n      if (disabled && dayOfMonth.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (dayOfMonth.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      const lastSelectedDate = this.date\r\n        ? dayOfMonth.isSame(this.date, 'day')\r\n        : false;\r\n      const tabIndex = this.wasLastSelected(dayOfMonth) ? 0 : -1;\r\n      this.daysInMonth.push({\r\n        date: dayOfMonth.clone(),\r\n        inMonth: inMonth,\r\n        isToday: isToday,\r\n        isFromDate: isFromDate,\r\n        isToDate: isToDate,\r\n        isLastOfWeek: isLastOfWeek,\r\n        isInRange: isInRange,\r\n        dateID: dateID,\r\n        tabIndex: tabIndex,\r\n        disabled: disabled,\r\n        disabledFocused: disabledFocused,\r\n        lastSelectedDate: lastSelectedDate,\r\n        isInRangeFromDate: isInRangeFromDate\r\n      });\r\n\r\n      dayOfMonth.add(1, 'day');\r\n      index++;\r\n    }\r\n  }\r\n\r\n  resetMonth() {\r\n    this.daysInMonth.forEach(day => {\r\n      day.lastSelectedDate = false;\r\n      day.disabled = this.isDateDisabled(day.date);\r\n    });\r\n  }\r\n\r\n  setupTabIndex() {\r\n    let resetFocus = false;\r\n    this.daysInMonth.forEach(day => {\r\n      if (day.inMonth && !day.disabled && !resetFocus) {\r\n        resetFocus = true;\r\n        day.tabIndex = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMonths(date: Moment, keyBoardInteraction?: boolean) {\r\n    this.daysInMonth.forEach((day, index) => {\r\n      const inMonth =\r\n        day.date.isSameOrAfter(date.clone().startOf('month')) &&\r\n        day.date.isSameOrBefore(date.clone().endOf('month'));\r\n      const isToday = day.date.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && day.date.isSame(this.fromDate, 'day');\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n      const isToDate =\r\n        (this.range && this.toDate && day.date.isSame(this.toDate, 'day')) ||\r\n        (day.date.isAfter(this.fromDate, 'day') &&\r\n          !this.selectingFromDate &&\r\n          day.date.isSame(this.hoverDate, 'day'));\r\n      const isLastOfWeek = day.date.weekday() === 6;\r\n      const isInRange =\r\n        this.range &&\r\n        (day.date.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            day.date.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? day.date.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + day.date.month() + '-' + day.date.date()\r\n        : '';\r\n      const tabIndex = this.wasLastSelected(day.date) ? 0 : -1;\r\n\r\n      let disabled = this.isDateDisabled(day.date);\r\n      const lastSelectedDate = keyBoardInteraction\r\n        ? day.lastSelectedDate\r\n        : this.date\r\n        ? day.date.isSame(this.date, 'day')\r\n        : false;\r\n      let disabledFocused = false;\r\n      if (disabled && day.date.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (day.date.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      day.inMonth = inMonth;\r\n      day.isToday = isToday;\r\n      day.isFromDate = isFromDate;\r\n      day.isInRangeFromDate = isInRangeFromDate;\r\n      day.isToDate = isToDate;\r\n      day.isLastOfWeek = isLastOfWeek;\r\n      day.isInRange = isInRange;\r\n      day.dateID = dateID;\r\n      day.tabIndex = tabIndex;\r\n      day.disabled = disabled;\r\n      day.disabledFocused = disabledFocused;\r\n      day.lastSelectedDate = lastSelectedDate;\r\n    });\r\n  }\r\n\r\n  isDateDisabled(date: Moment): boolean {\r\n    let disabled = false;\r\n    if (this.min && this.max)\r\n      disabled = !date.isBetween(this.min, this.max, 'day', '[]');\r\n    else if (this.min) disabled = !date.isBefore(this.min, 'day');\r\n    else if (this.max) disabled = !date.isAfter(this.max, 'day');\r\n    if (this.disableDateFilter) {\r\n      disabled = disabled || this.disableDateFilter(date);\r\n    }\r\n    return disabled;\r\n  }\r\n\r\n  selectDate(d: Moment) {\r\n    if (this.range) {\r\n      this.selectDateRange(d);\r\n    } else {\r\n      this.date = d;\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n    }\r\n  }\r\n\r\n  selectDateRange(d: Moment) {\r\n    if (this.selectingFromDate) {\r\n      this.fromDate = d;\r\n      this.toDate = null;\r\n      this._date = null;\r\n      this.selectingFromDate = false;\r\n      this.updateMonths(d);\r\n      this.fromDateChange.emit(this.fromDate);\r\n    } else {\r\n      this.toDate = moment(this.fromDate).isBefore(d, 'day')\r\n        ? d\r\n        : this.fromDate.clone().add(1, 'day');\r\n      this.fromDateChange.emit(this.fromDate);\r\n      this.toDateChange.emit(this.toDate);\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n      this.selectingFromDate = true;\r\n    }\r\n  }\r\n\r\n  dateHover(d: Moment, mouseEnter: boolean) {\r\n    this.hoverDate = mouseEnter\r\n      ? d.clone()\r\n      : this.range\r\n      ? this.fromDate\r\n      : this.lastSelectedDate;\r\n    if (this.range) this.updateMonths(d);\r\n  }\r\n\r\n  selectNewMonthDate(newDate: Moment) {\r\n    this.updateOnDateChange(newDate, true);\r\n    this.setupMonth(newDate, newDate.month(), newDate.year());\r\n    this.internalDate = newDate;\r\n    this.internalDateChange.emit(newDate);\r\n  }\r\n\r\n  validateDate(newDate: Moment) {\r\n    return moment(newDate).valueOf() > this.max\r\n      ? moment(this.max)\r\n      : moment(newDate).valueOf() < this.min\r\n      ? moment(this.min)\r\n      : moment(newDate);\r\n  }\r\n\r\n  wasLastSelected(d: Moment) {\r\n    return d.isSame(this.lastSelectedDate, 'day');\r\n  }\r\n\r\n  onKeyDown($event: KeyboardEvent, date: Moment) {\r\n    let newDateID: Moment;\r\n    switch ($event.key) {\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n        newDateID = date.clone().add(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        newDateID = date.clone().subtract(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        newDateID = date.clone().subtract(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        newDateID = date.clone().add(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'Home':\r\n        newDateID = date.clone().startOf('month');\r\n        break;\r\n      case 'End':\r\n        newDateID = date.clone().endOf('month');\r\n        break;\r\n      case 'PageUp':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().subtract(1, 'year')\r\n          : date.clone().subtract(1, 'month');\r\n        break;\r\n      case 'PageDown':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().add(1, 'year')\r\n          : date.clone().add(1, 'month');\r\n        break;\r\n    }\r\n\r\n    if (newDateID) {\r\n      const dateBtnID = `${\r\n        this.dayViewID\r\n      }-${newDateID.month()}-${newDateID.date()}`;\r\n      let foundInMonth = false;\r\n      this.hoverDate = newDateID;\r\n      this.dayButtons.forEach((dButton, index: number) => {\r\n        if (this.daysInMonth[index]) {\r\n          const dBtnId =\r\n            this.dayViewID +\r\n            '-' +\r\n            this.daysInMonth[index].date.month() +\r\n            '-' +\r\n            this.daysInMonth[index].date.date();\r\n          if (\r\n            !foundInMonth &&\r\n            dBtnId === dateBtnID &&\r\n            dButton.smCalendarDay.inMonth &&\r\n            newDateID.year() === this.daysInMonth[index].date.year()\r\n          ) {\r\n            foundInMonth = true;\r\n            this.updateOnDateChange(newDateID, true);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!foundInMonth) {\r\n        this.selectNewMonthDate(newDateID);\r\n        this.lastSelectedDate = newDateID;\r\n        this.updateOnDateChange(newDateID, true);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "dateID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 81
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "disabledFocused",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 92
                },
                {
                    "name": "inMonth",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "isFromDate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "isInRange",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 89
                },
                {
                    "name": "isInRangeFromDate",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 86
                },
                {
                    "name": "isLastOfWeek",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "isToDate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "isToday",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "lastSelectedDate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "tabIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Year",
            "id": "interface-Year-3ba6106c111370cb3d9f00428dbd8af6",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
            "type": "interface",
            "sourceCode": "import {\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  QueryList,\r\n  ViewChildren,\r\n  ElementRef,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Component, Input, HostListener } from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\nexport interface Year {\r\n  date: Moment;\r\n  year: number;\r\n  today: boolean;\r\n  tabIndex: number;\r\n  dateID: string;\r\n  disabled: boolean;\r\n  disabledFocus: boolean;\r\n  selectedDate: boolean;\r\n}\r\n@Component({\r\n  selector: 'sm-calendar-year-view',\r\n  templateUrl: './calendar-year-view.component.html'\r\n})\r\nexport class CalendarYearViewComponent implements OnInit {\r\n  @HostBinding('class.sm-date-picker-calendar-year-view')\r\n  readonly defaultHostClass = true;\r\n  private _date: Moment;\r\n\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(value: Moment) {\r\n    this._date = !!value ? value : null;\r\n    if (this._date && this._date.year() > 9999) this._date.set('year', 9999);\r\n  }\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    this._internalDate = date;\r\n    this.startYear = -150;\r\n    this.endYear = 100;\r\n    if (this._internalDate && this._internalDate.year() > 9999)\r\n      this._internalDate.set('year', 9999);\r\n    this.updateYears(date);\r\n  }\r\n\r\n  @Input() yearViewID: string;\r\n  @Input() min: number;\r\n  @Input() max: number;\r\n\r\n  private _yearView = false;\r\n\r\n  @HostBinding('class.opened')\r\n  @Input()\r\n  get yearView(): boolean {\r\n    return this._yearView;\r\n  }\r\n  set yearView(yearView: boolean) {\r\n    this._yearView = yearView;\r\n    if (this._yearView) {\r\n      this.startYear = -150;\r\n      this.endYear = 100;\r\n      this.updateYears();\r\n      this.focusOnSelectedDay();\r\n    }\r\n  }\r\n\r\n  private scrollDirection = 0;\r\n  private scrollOffset = 0;\r\n  private startYear = -150;\r\n  private endYear = 100;\r\n\r\n  @Output() yearSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n\r\n  @ViewChildren('yearButtons') yearButtons: QueryList<ElementRef>;\r\n\r\n  years: Array<Year>;\r\n\r\n  constructor(private element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngOnInit() {\r\n    this.updateYears();\r\n    this.focusOnSelectedDay();\r\n  }\r\n\r\n  updateYears(newDate?: Moment) {\r\n    if (newDate) {\r\n      this._internalDate = newDate;\r\n    }\r\n\r\n    if (!!this.internalDate) {\r\n      this.years = [];\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        if (\r\n          i + this.internalDate.year() >= 0 &&\r\n          i + this.internalDate.year() <= 9999\r\n        )\r\n          this.addYear(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  addYear(i: number, unshift?: boolean, fromYear?: number) {\r\n    const currentYear = fromYear ? fromYear : this.internalDate.year();\r\n    const newDate = fromYear\r\n      ? moment().set('year', fromYear)\r\n      : this.internalDate.clone();\r\n    if (unshift) {\r\n      this.years.unshift({\r\n        date: newDate.clone().add(i, 'year'),\r\n        year: currentYear + i,\r\n        today: moment().year() === currentYear + i,\r\n        tabIndex:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? 0\r\n            : -1,\r\n        dateID:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? this.yearViewID + '-sm-dp-selected-day'\r\n            : this.yearViewID +\r\n              '-' +\r\n              newDate\r\n                .clone()\r\n                .add(i, 'year')\r\n                .year(),\r\n        selectedDate: this.date\r\n          ? newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .year() === this.date.year()\r\n          : false,\r\n        disabled:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() !== newDate.year(),\r\n        disabledFocus:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n      });\r\n    } else {\r\n      this.years.push({\r\n        date: newDate.clone().add(i, 'year'),\r\n        year: currentYear + i,\r\n        today: moment().year() === currentYear + i,\r\n        tabIndex:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? 0\r\n            : -1,\r\n        dateID:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? this.yearViewID + '-sm-dp-selected-day'\r\n            : this.yearViewID +\r\n              '-' +\r\n              newDate\r\n                .clone()\r\n                .add(i, 'year')\r\n                .year(),\r\n        selectedDate: this.date\r\n          ? newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .year() === this.date.year()\r\n          : false,\r\n        disabled:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() !== newDate.year(),\r\n        disabledFocus:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n      });\r\n    }\r\n  }\r\n\r\n  selectedYear(date: Moment) {\r\n    this.yearSelect.emit(date);\r\n  }\r\n\r\n  selectNewYear(year: Moment) {\r\n    this.internalDate = year;\r\n    this.internalDateChange.emit(year);\r\n    this.updateYears();\r\n    this.focusOnSelectedDay();\r\n  }\r\n\r\n  focusOnSelectedDay() {\r\n    setTimeout(() => {\r\n      this.yearButtons.forEach(year => {\r\n        if (\r\n          (<HTMLElement>year.nativeElement).id ===\r\n          `${this.yearViewID}-sm-dp-selected-day`\r\n        ) {\r\n          (<HTMLElement>year.nativeElement).focus();\r\n        }\r\n      });\r\n    }, 0);\r\n  }\r\n\r\n  onKeyDown($event: KeyboardEvent, date: Moment) {\r\n    let newDateID: Moment;\r\n    switch ($event.key) {\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        newDateID = date.clone().add(4, 'year');\r\n        break;\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        newDateID = date.clone().subtract(4, 'year');\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        newDateID = date.clone().subtract(1, 'year');\r\n        break;\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n        newDateID = date.clone().add(1, 'year');\r\n        break;\r\n    }\r\n\r\n    if (newDateID) {\r\n      const dateBtnID = `${this.yearViewID}-${newDateID.year()}`;\r\n      this.yearButtons.forEach(year => {\r\n        if ((<HTMLElement>year.nativeElement).id === dateBtnID) {\r\n          this.selectNewYear(newDateID);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  endYearsInView(filterMaxYears: boolean): boolean {\r\n    let yearInView = false;\r\n    const calendarElement = (<HTMLElement>(\r\n      this.element.nativeElement\r\n    )).getBoundingClientRect();\r\n    this.yearButtons\r\n      .filter((item, index) => {\r\n        return filterMaxYears\r\n          ? index >= this.yearButtons.length - 30\r\n          : index < 30;\r\n      })\r\n      .forEach(elmt => {\r\n        const buttomElement = (<HTMLElement>(\r\n          elmt.nativeElement\r\n        )).getBoundingClientRect();\r\n        if (\r\n          buttomElement.top >= calendarElement.top &&\r\n          buttomElement.bottom <= calendarElement.bottom\r\n        ) {\r\n          yearInView = yearInView || true;\r\n        }\r\n      });\r\n\r\n    return yearInView;\r\n  }\r\n\r\n  /* Scrolling functionality below: */\r\n  minYearHit(number): boolean {\r\n    return this.years[0].year + number < 0;\r\n  }\r\n\r\n  maxYearHit(number): boolean {\r\n    return this.years[this.years.length - 1].year + number > 9999;\r\n  }\r\n\r\n  updateYearsOnScroll(direction: number, scrollMultiplier: number) {\r\n    let boundsHit = direction < 0 ? !this.minYearHit(-1) : !this.maxYearHit(1);\r\n    for (let i = 0; boundsHit && i < Math.round(scrollMultiplier); i++) {\r\n      this.startYear += direction;\r\n      this.endYear += direction;\r\n      if (direction < 0) {\r\n        this.addYear(-1, true, this.years[0].year);\r\n        this.years.pop();\r\n      } else {\r\n        this.years.shift();\r\n        this.addYear(1, false, this.years[this.years.length - 1].year);\r\n      }\r\n      boundsHit = direction < 0 ? !this.minYearHit(-1) : !this.maxYearHit(1);\r\n    }\r\n  }\r\n\r\n  @HostListener('scroll', ['$event'])\r\n  onScroll($event): void {\r\n    const scrollDown = this.scrollDirection < $event.target.scrollTop;\r\n    const yearViewHeight = 260; //year button x5\r\n\r\n    this.scrollOffset =\r\n      this.scrollOffset === 0 ? $event.target.scrollTop : this.scrollOffset;\r\n\r\n    this.scrollDirection = $event.target.scrollTop;\r\n\r\n    if (scrollDown) {\r\n      if (!this.endYearsInView(false)) {\r\n        if (this.scrollDirection - this.scrollOffset > yearViewHeight) {\r\n          const scrollMultiplier =\r\n            (this.scrollDirection - this.scrollOffset) / 40;\r\n          this.scrollOffset = 0;\r\n          this.updateYearsOnScroll(1, scrollMultiplier);\r\n        }\r\n      } else {\r\n        this.scrollOffset = 0;\r\n      }\r\n    } else {\r\n      if (!this.endYearsInView(true)) {\r\n        if (this.scrollOffset - this.scrollDirection > yearViewHeight) {\r\n          const scrollMultiplier =\r\n            (this.scrollOffset - this.scrollDirection) / 40;\r\n          this.scrollOffset = 0;\r\n          this.updateYearsOnScroll(-1, scrollMultiplier);\r\n        }\r\n      } else {\r\n        this.scrollOffset = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "dateID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "disabled",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "disabledFocus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "selectedDate",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "tabIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "today",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "year",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [],
    "classes": [],
    "directives": [
        {
            "name": "SMCheckboxComponent",
            "id": "directive-SMCheckboxComponent-f9ca31c83a0e140985d82f8d1559cc7f",
            "file": "projects/components/src/lib/components/checkbox/checkbox.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, OnInit, HostBinding, Input, Directive, ViewEncapsulation, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  host: { '[class.sm-checkbox-wrapper]': 'true' },\r\n})\r\nexport class SMCheckboxComponentWrapper implements OnInit {\r\n\r\n  @Input() field_id: string;\r\n  @Input() label: string;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Directive({\r\n  selector: '[sm-checkbox]',\r\n})\r\nexport class SMCheckboxComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-checkbox--field') @Input() default = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "selector": "[sm-checkbox]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "default",
                    "defaultValue": "true",
                    "line": 23
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            }
        },
        {
            "name": "SMDayViewDate",
            "id": "directive-SMDayViewDate-9f7b716a413cfc15f59ffa367fb6fe9a",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { DatePickerDisableDateFilter } from './../../date.filters';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChildren,\r\n  QueryList,\r\n  HostBinding,\r\n  Directive\r\n} from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'button[smCalendarDay], button[sm-day-view-date]'\r\n})\r\nexport class SMDayViewDate {\r\n  @HostBinding('class.calendar-day-view-days') readonly defaultHostClass = true;\r\n  /**  @deprecated since 1.14.0, sm-day-view-date replaced by smCalendarDay */\r\n  @Input('sm-day-view-date')\r\n  set calendarDay(value: CalendarDay) {\r\n    this.smCalendarDay = value;\r\n  }\r\n  get calendarDay() {\r\n    return this.smCalendarDay;\r\n  }\r\n\r\n  @Input() smCalendarDay: CalendarDay;\r\n\r\n\r\n  constructor(\r\n    private host: ElementRef\r\n){}\r\n\r\n  @HostBinding('class.notInMonth') get getnotInMonth() {\r\n    return !this.smCalendarDay.inMonth;\r\n  }\r\n\r\n  @HostBinding('class.today') get getToday() {\r\n    return this.smCalendarDay.isToday;\r\n  }\r\n\r\n  @HostBinding('attr.tabindex') get getTabIndex() {\r\n    return this.smCalendarDay.tabIndex;\r\n  }\r\n\r\n  @HostBinding('class.fromDate') get getFromDate() {\r\n    return this.smCalendarDay.isFromDate;\r\n  }\r\n\r\n  @HostBinding('class.toDate') get getToDate() {\r\n    return this.smCalendarDay.isToDate;\r\n  }\r\n\r\n  @HostBinding('class.last-of-week') get getlastOfWeek() {\r\n    return this.smCalendarDay.isLastOfWeek;\r\n  }\r\n\r\n  @HostBinding('class.inRange') get getInRange() {\r\n    return this.smCalendarDay.isInRange;\r\n  }\r\n\r\n  @HostBinding('class.disabled-focused') get getDisabledFocused() {\r\n    return this.smCalendarDay.disabledFocused;\r\n  }\r\n\r\n  @HostBinding('class.date-selected') get getLastSelectedDate() {\r\n    return this.smCalendarDay.lastSelectedDate;\r\n  }\r\n\r\n  focus() {\r\n    (<HTMLElement>this.host.nativeElement).focus();\r\n  }\r\n}\r\n\r\nconst moment = moment_;\r\n\r\nexport interface CalendarDay {\r\n  dateID: string;\r\n  date: Moment;\r\n  inMonth: boolean;\r\n  isToday: boolean;\r\n  isFromDate: boolean;\r\n  isInRangeFromDate?: boolean;\r\n  isToDate: boolean;\r\n  isLastOfWeek: boolean;\r\n  isInRange: boolean;\r\n  tabIndex: number;\r\n  disabled: boolean;\r\n  disabledFocused: boolean;\r\n  lastSelectedDate: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-calendar-day-view',\r\n  templateUrl: './calendar-day-view.component.html'\r\n})\r\nexport class CalendarDayViewComponent {\r\n  @HostBinding('class.sm-date-picker-calendar-day-view')\r\n  readonly defaultHostClass = true;\r\n\r\n  private _date: Moment;\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(date: Moment) {\r\n    if (date) {\r\n      this._date = date;\r\n      this.internalDate = date;\r\n    }\r\n  }\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    if (date) {\r\n      this._internalDate = date;\r\n      this.setupMonth(\r\n        this.internalDate,\r\n        this.internalDate.month(),\r\n        this.internalDate.year()\r\n      );\r\n      this.setupTabIndex();\r\n    }\r\n  }\r\n\r\n  private _viewOpened = false;\r\n  @Input()\r\n  get viewOpened(): boolean {\r\n    return this._viewOpened;\r\n  }\r\n  set viewOpened(isOpen: boolean) {\r\n    this._viewOpened = isOpen;\r\n    this.focusOnDate();\r\n  }\r\n\r\n  @Input()\r\n  set calendarOpened(isOpen: boolean) {\r\n    if (!isOpen && this.date) {\r\n      this.internalDate = this.date.clone();\r\n      this.internalDateChange.emit(this.internalDate);\r\n    }\r\n  }\r\n\r\n  private _fromDate: Moment;\r\n\r\n  @Input()\r\n  set fromDate(val: Moment) {\r\n    this._fromDate = val;\r\n  }\r\n  get fromDate() {\r\n    return this._fromDate;\r\n  }\r\n  private _toDate: Moment;\r\n\r\n  @Input()\r\n  set toDate(val: Moment) {\r\n    this._toDate = val;\r\n    if (\r\n      this._toDate &&\r\n      this._fromDate &&\r\n      this._toDate.isSame(this._fromDate, 'day')\r\n    )\r\n      this._toDate = this._toDate.add(1, 'day').clone();\r\n  }\r\n  get toDate() {\r\n    return this._toDate;\r\n  }\r\n\r\n  private _disableDateFilter: DatePickerDisableDateFilter;\r\n  @Input()\r\n  set disableDateFilter(callBackFunction: DatePickerDisableDateFilter) {\r\n    this._disableDateFilter = callBackFunction;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get disableDateFilter(): DatePickerDisableDateFilter {\r\n    return this._disableDateFilter;\r\n  }\r\n\r\n  @Input() dayView = false;\r\n  @Input() dayViewID: string;\r\n  @Input() range = false;\r\n\r\n  private _min: number;\r\n  @Input()\r\n  set min(min: number) {\r\n    this._min = min;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get min(): number {\r\n    return this._min;\r\n  }\r\n\r\n  private _max: number;\r\n  @Input()\r\n  set max(max: number) {\r\n    this._max = max;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  @Output() dateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n  @Output() dateSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @Output() fromDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() toDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @ViewChildren(SMDayViewDate) dayButtons: QueryList<SMDayViewDate>;\r\n\r\n  lastSelectedDate: Moment = moment();\r\n  hoverDate: Moment = moment();\r\n  currentDateID: string;\r\n  selectingFromDate = true;\r\n\r\n  daysInMonth: Array<CalendarDay> = [];\r\n  currentFocusDateIndex: number;\r\n\r\n  constructor() {}\r\n\r\n  isValidNewDate(newDate: Moment): boolean {\r\n    if (!this.validBounds(newDate)) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  validBounds(newDate: Moment): boolean {\r\n    return newDate.isBetween(this.min, this.max, 'day', '[]');\r\n  }\r\n\r\n  resetDP() {\r\n    this._date = null;\r\n    this._fromDate = null;\r\n    this._toDate = null;\r\n    this._viewOpened = false;\r\n    this.dayView = false;\r\n    this.internalDate = moment();\r\n  }\r\n\r\n  updateOnDateChange(date: Moment, keyBoardInteraction?: boolean) {\r\n    if (!keyBoardInteraction) this.internalDate = date.clone();\r\n    this.lastSelectedDate = this.internalDate;\r\n    this.currentDateID =\r\n      this.dayViewID +\r\n      '-' +\r\n      this.lastSelectedDate.month() +\r\n      '-' +\r\n      this.lastSelectedDate.date();\r\n\r\n    if (!keyBoardInteraction) this.setupMonth(date, date.month(), date.year());\r\n    this.updateMonths(date, keyBoardInteraction);\r\n    if (keyBoardInteraction) this.focusOnDate();\r\n  }\r\n\r\n  focusOnDate() {\r\n    setTimeout(() => {\r\n      if (this.dayButtons.toArray()[this.currentFocusDateIndex]) {\r\n        this.dayButtons.toArray()[this.currentFocusDateIndex].focus();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /*\r\n    Sets up the month based on sunday being first day of week to Sat being last day of week\r\n  */\r\n  setupMonth(date: Moment, month: number, year: number) {\r\n    const momentDay = moment()\r\n      .locale(date.locale())\r\n      .month(month)\r\n      .year(year);\r\n    const dayOfMonth = momentDay\r\n      .clone()\r\n      .startOf('month')\r\n      .startOf('week');\r\n    const endOfMonth = momentDay\r\n      .clone()\r\n      .endOf('month')\r\n      .endOf('week');\r\n    this.daysInMonth = [];\r\n    let index = 0;\r\n    while (dayOfMonth.clone().isSameOrBefore(endOfMonth)) {\r\n      const inMonth =\r\n        dayOfMonth.isSameOrAfter(momentDay.clone().startOf('month')) &&\r\n        dayOfMonth.isSameOrBefore(momentDay.clone().endOf('month'));\r\n      const isToday = dayOfMonth.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && dayOfMonth.isSame(this.fromDate, 'day');\r\n      const isToDate =\r\n        this.range && this.toDate && dayOfMonth.isSame(this.toDate, 'day');\r\n      const isLastOfWeek = dayOfMonth.weekday() === 6;\r\n\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n\r\n      const isInRange =\r\n        this.range &&\r\n        (dayOfMonth.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            dayOfMonth.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? dayOfMonth.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + dayOfMonth.month() + '-' + dayOfMonth.date()\r\n        : '';\r\n      let disabled = this.isDateDisabled(dayOfMonth);\r\n\r\n      let disabledFocused = false;\r\n      if (disabled && dayOfMonth.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (dayOfMonth.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      const lastSelectedDate = this.date\r\n        ? dayOfMonth.isSame(this.date, 'day')\r\n        : false;\r\n      const tabIndex = this.wasLastSelected(dayOfMonth) ? 0 : -1;\r\n      this.daysInMonth.push({\r\n        date: dayOfMonth.clone(),\r\n        inMonth: inMonth,\r\n        isToday: isToday,\r\n        isFromDate: isFromDate,\r\n        isToDate: isToDate,\r\n        isLastOfWeek: isLastOfWeek,\r\n        isInRange: isInRange,\r\n        dateID: dateID,\r\n        tabIndex: tabIndex,\r\n        disabled: disabled,\r\n        disabledFocused: disabledFocused,\r\n        lastSelectedDate: lastSelectedDate,\r\n        isInRangeFromDate: isInRangeFromDate\r\n      });\r\n\r\n      dayOfMonth.add(1, 'day');\r\n      index++;\r\n    }\r\n  }\r\n\r\n  resetMonth() {\r\n    this.daysInMonth.forEach(day => {\r\n      day.lastSelectedDate = false;\r\n      day.disabled = this.isDateDisabled(day.date);\r\n    });\r\n  }\r\n\r\n  setupTabIndex() {\r\n    let resetFocus = false;\r\n    this.daysInMonth.forEach(day => {\r\n      if (day.inMonth && !day.disabled && !resetFocus) {\r\n        resetFocus = true;\r\n        day.tabIndex = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMonths(date: Moment, keyBoardInteraction?: boolean) {\r\n    this.daysInMonth.forEach((day, index) => {\r\n      const inMonth =\r\n        day.date.isSameOrAfter(date.clone().startOf('month')) &&\r\n        day.date.isSameOrBefore(date.clone().endOf('month'));\r\n      const isToday = day.date.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && day.date.isSame(this.fromDate, 'day');\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n      const isToDate =\r\n        (this.range && this.toDate && day.date.isSame(this.toDate, 'day')) ||\r\n        (day.date.isAfter(this.fromDate, 'day') &&\r\n          !this.selectingFromDate &&\r\n          day.date.isSame(this.hoverDate, 'day'));\r\n      const isLastOfWeek = day.date.weekday() === 6;\r\n      const isInRange =\r\n        this.range &&\r\n        (day.date.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            day.date.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? day.date.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + day.date.month() + '-' + day.date.date()\r\n        : '';\r\n      const tabIndex = this.wasLastSelected(day.date) ? 0 : -1;\r\n\r\n      let disabled = this.isDateDisabled(day.date);\r\n      const lastSelectedDate = keyBoardInteraction\r\n        ? day.lastSelectedDate\r\n        : this.date\r\n        ? day.date.isSame(this.date, 'day')\r\n        : false;\r\n      let disabledFocused = false;\r\n      if (disabled && day.date.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (day.date.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      day.inMonth = inMonth;\r\n      day.isToday = isToday;\r\n      day.isFromDate = isFromDate;\r\n      day.isInRangeFromDate = isInRangeFromDate;\r\n      day.isToDate = isToDate;\r\n      day.isLastOfWeek = isLastOfWeek;\r\n      day.isInRange = isInRange;\r\n      day.dateID = dateID;\r\n      day.tabIndex = tabIndex;\r\n      day.disabled = disabled;\r\n      day.disabledFocused = disabledFocused;\r\n      day.lastSelectedDate = lastSelectedDate;\r\n    });\r\n  }\r\n\r\n  isDateDisabled(date: Moment): boolean {\r\n    let disabled = false;\r\n    if (this.min && this.max)\r\n      disabled = !date.isBetween(this.min, this.max, 'day', '[]');\r\n    else if (this.min) disabled = !date.isBefore(this.min, 'day');\r\n    else if (this.max) disabled = !date.isAfter(this.max, 'day');\r\n    if (this.disableDateFilter) {\r\n      disabled = disabled || this.disableDateFilter(date);\r\n    }\r\n    return disabled;\r\n  }\r\n\r\n  selectDate(d: Moment) {\r\n    if (this.range) {\r\n      this.selectDateRange(d);\r\n    } else {\r\n      this.date = d;\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n    }\r\n  }\r\n\r\n  selectDateRange(d: Moment) {\r\n    if (this.selectingFromDate) {\r\n      this.fromDate = d;\r\n      this.toDate = null;\r\n      this._date = null;\r\n      this.selectingFromDate = false;\r\n      this.updateMonths(d);\r\n      this.fromDateChange.emit(this.fromDate);\r\n    } else {\r\n      this.toDate = moment(this.fromDate).isBefore(d, 'day')\r\n        ? d\r\n        : this.fromDate.clone().add(1, 'day');\r\n      this.fromDateChange.emit(this.fromDate);\r\n      this.toDateChange.emit(this.toDate);\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n      this.selectingFromDate = true;\r\n    }\r\n  }\r\n\r\n  dateHover(d: Moment, mouseEnter: boolean) {\r\n    this.hoverDate = mouseEnter\r\n      ? d.clone()\r\n      : this.range\r\n      ? this.fromDate\r\n      : this.lastSelectedDate;\r\n    if (this.range) this.updateMonths(d);\r\n  }\r\n\r\n  selectNewMonthDate(newDate: Moment) {\r\n    this.updateOnDateChange(newDate, true);\r\n    this.setupMonth(newDate, newDate.month(), newDate.year());\r\n    this.internalDate = newDate;\r\n    this.internalDateChange.emit(newDate);\r\n  }\r\n\r\n  validateDate(newDate: Moment) {\r\n    return moment(newDate).valueOf() > this.max\r\n      ? moment(this.max)\r\n      : moment(newDate).valueOf() < this.min\r\n      ? moment(this.min)\r\n      : moment(newDate);\r\n  }\r\n\r\n  wasLastSelected(d: Moment) {\r\n    return d.isSame(this.lastSelectedDate, 'day');\r\n  }\r\n\r\n  onKeyDown($event: KeyboardEvent, date: Moment) {\r\n    let newDateID: Moment;\r\n    switch ($event.key) {\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n        newDateID = date.clone().add(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        newDateID = date.clone().subtract(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        newDateID = date.clone().subtract(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        newDateID = date.clone().add(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'Home':\r\n        newDateID = date.clone().startOf('month');\r\n        break;\r\n      case 'End':\r\n        newDateID = date.clone().endOf('month');\r\n        break;\r\n      case 'PageUp':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().subtract(1, 'year')\r\n          : date.clone().subtract(1, 'month');\r\n        break;\r\n      case 'PageDown':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().add(1, 'year')\r\n          : date.clone().add(1, 'month');\r\n        break;\r\n    }\r\n\r\n    if (newDateID) {\r\n      const dateBtnID = `${\r\n        this.dayViewID\r\n      }-${newDateID.month()}-${newDateID.date()}`;\r\n      let foundInMonth = false;\r\n      this.hoverDate = newDateID;\r\n      this.dayButtons.forEach((dButton, index: number) => {\r\n        if (this.daysInMonth[index]) {\r\n          const dBtnId =\r\n            this.dayViewID +\r\n            '-' +\r\n            this.daysInMonth[index].date.month() +\r\n            '-' +\r\n            this.daysInMonth[index].date.date();\r\n          if (\r\n            !foundInMonth &&\r\n            dBtnId === dateBtnID &&\r\n            dButton.smCalendarDay.inMonth &&\r\n            newDateID.year() === this.daysInMonth[index].date.year()\r\n          ) {\r\n            foundInMonth = true;\r\n            this.updateOnDateChange(newDateID, true);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!foundInMonth) {\r\n        this.selectNewMonthDate(newDateID);\r\n        this.lastSelectedDate = newDateID;\r\n        this.updateOnDateChange(newDateID, true);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "selector": "button[smCalendarDay], button[sm-day-view-date]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "sm-day-view-date",
                    "line": 23,
                    "type": ""
                },
                {
                    "name": "smCalendarDay",
                    "line": 30,
                    "type": "CalendarDay"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "attr.tabindex",
                    "line": 45
                },
                {
                    "name": "class.calendar-day-view-days",
                    "defaultValue": "true",
                    "line": 20
                },
                {
                    "name": "class.date-selected",
                    "line": 69
                },
                {
                    "name": "class.disabled-focused",
                    "line": 65
                },
                {
                    "name": "class.fromDate",
                    "line": 49
                },
                {
                    "name": "class.inRange",
                    "line": 61
                },
                {
                    "name": "class.last-of-week",
                    "line": 57
                },
                {
                    "name": "class.notInMonth",
                    "line": 37
                },
                {
                    "name": "class.toDate",
                    "line": 53
                },
                {
                    "name": "class.today",
                    "line": 41
                }
            ],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "calendarDay": {
                    "name": "calendarDay",
                    "setSignature": {
                        "name": "calendarDay",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 23,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "calendarDay",
                        "type": "",
                        "returnType": "",
                        "line": 26
                    }
                }
            }
        },
        {
            "name": "SMToggleComponent",
            "id": "directive-SMToggleComponent-e7437297076ccaa5ca781222e9def3d0",
            "file": "projects/components/src/lib/components/toggle/toggle.component.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Component, OnInit, Directive, HostBinding, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  host: { '[class.sm-toggle-wrapper]': 'true' },\r\n})\r\nexport class SMToggleComponentWrapper implements OnInit {\r\n\r\n  @Input() field_id: string;\r\n  @Input() label: string;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[sm-toggle]',\r\n})\r\nexport class SMToggleComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-toggle--field') @Input() default = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}",
            "selector": "[sm-toggle]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "default",
                    "defaultValue": "true",
                    "line": 24
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            }
        }
    ],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "CalendarDayViewComponent",
            "id": "component-CalendarDayViewComponent-9f7b716a413cfc15f59ffa367fb6fe9a",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-calendar-day-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar-day-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "calendarOpened",
                    "line": 144,
                    "type": "boolean"
                },
                {
                    "name": "date",
                    "line": 106,
                    "type": "Moment"
                },
                {
                    "name": "dayView",
                    "defaultValue": "false",
                    "line": 186
                },
                {
                    "name": "dayViewID",
                    "line": 187,
                    "type": "string"
                },
                {
                    "name": "disableDateFilter",
                    "line": 178,
                    "type": ""
                },
                {
                    "name": "fromDate",
                    "line": 154,
                    "type": ""
                },
                {
                    "name": "internalDate",
                    "line": 118,
                    "type": "Moment"
                },
                {
                    "name": "max",
                    "line": 202,
                    "type": "number"
                },
                {
                    "name": "min",
                    "line": 192,
                    "type": "number"
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "line": 188
                },
                {
                    "name": "toDate",
                    "line": 163,
                    "type": ""
                },
                {
                    "name": "viewOpened",
                    "line": 135,
                    "type": "boolean"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 210,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "dateSelect",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 214,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "fromDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 216,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "internalDateChange",
                    "defaultValue": "new EventEmitter<\r\n    Moment\r\n  >()",
                    "line": 211,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "toDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 217,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 104,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_disableDateFilter",
                    "type": "DatePickerDisableDateFilter",
                    "optional": false,
                    "description": "",
                    "line": 176,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_fromDate",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 151,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_internalDate",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 116,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_max",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 200,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_min",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 190,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toDate",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_viewOpened",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 133,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentDateID",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 223
                },
                {
                    "name": "currentFocusDateIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 227
                },
                {
                    "name": "dayButtons",
                    "type": "QueryList<SMDayViewDate>",
                    "optional": false,
                    "description": "",
                    "line": 219,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "SMDayViewDate"
                        }
                    ]
                },
                {
                    "name": "daysInMonth",
                    "defaultValue": "[]",
                    "type": "Array<CalendarDay>",
                    "optional": false,
                    "description": "",
                    "line": 226
                },
                {
                    "name": "hoverDate",
                    "defaultValue": "moment()",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 222
                },
                {
                    "name": "lastSelectedDate",
                    "defaultValue": "moment()",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 221
                },
                {
                    "name": "selectingFromDate",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 224
                }
            ],
            "methodsClass": [
                {
                    "name": "dateHover",
                    "args": [
                        {
                            "name": "d",
                            "type": "Moment"
                        },
                        {
                            "name": "mouseEnter",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 476,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "mouseEnter",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusOnDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 265
                },
                {
                    "name": "isDateDisabled",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 432,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidNewDate",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 231,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 504,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetDP",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 241
                },
                {
                    "name": "resetMonth",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 354
                },
                {
                    "name": "selectDate",
                    "args": [
                        {
                            "name": "d",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 444,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectDateRange",
                    "args": [
                        {
                            "name": "d",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 455,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectNewMonthDate",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 485,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupMonth",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        },
                        {
                            "name": "month",
                            "type": "number"
                        },
                        {
                            "name": "year",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 276,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "month",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "year",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupTabIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361
                },
                {
                    "name": "updateMonths",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        },
                        {
                            "name": "keyBoardInteraction",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 371,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyBoardInteraction",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateOnDateChange",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        },
                        {
                            "name": "keyBoardInteraction",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "keyBoardInteraction",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateDate",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 492,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validBounds",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 237,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "wasLastSelected",
                    "args": [
                        {
                            "name": "d",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 500,
                    "jsdoctags": [
                        {
                            "name": "d",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-date-picker-calendar-day-view",
                    "defaultValue": "true",
                    "line": 102
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DatePickerDisableDateFilter } from './../../date.filters';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ViewChildren,\r\n  QueryList,\r\n  HostBinding,\r\n  Directive\r\n} from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nimport { ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: 'button[smCalendarDay], button[sm-day-view-date]'\r\n})\r\nexport class SMDayViewDate {\r\n  @HostBinding('class.calendar-day-view-days') readonly defaultHostClass = true;\r\n  /**  @deprecated since 1.14.0, sm-day-view-date replaced by smCalendarDay */\r\n  @Input('sm-day-view-date')\r\n  set calendarDay(value: CalendarDay) {\r\n    this.smCalendarDay = value;\r\n  }\r\n  get calendarDay() {\r\n    return this.smCalendarDay;\r\n  }\r\n\r\n  @Input() smCalendarDay: CalendarDay;\r\n\r\n\r\n  constructor(\r\n    private host: ElementRef\r\n){}\r\n\r\n  @HostBinding('class.notInMonth') get getnotInMonth() {\r\n    return !this.smCalendarDay.inMonth;\r\n  }\r\n\r\n  @HostBinding('class.today') get getToday() {\r\n    return this.smCalendarDay.isToday;\r\n  }\r\n\r\n  @HostBinding('attr.tabindex') get getTabIndex() {\r\n    return this.smCalendarDay.tabIndex;\r\n  }\r\n\r\n  @HostBinding('class.fromDate') get getFromDate() {\r\n    return this.smCalendarDay.isFromDate;\r\n  }\r\n\r\n  @HostBinding('class.toDate') get getToDate() {\r\n    return this.smCalendarDay.isToDate;\r\n  }\r\n\r\n  @HostBinding('class.last-of-week') get getlastOfWeek() {\r\n    return this.smCalendarDay.isLastOfWeek;\r\n  }\r\n\r\n  @HostBinding('class.inRange') get getInRange() {\r\n    return this.smCalendarDay.isInRange;\r\n  }\r\n\r\n  @HostBinding('class.disabled-focused') get getDisabledFocused() {\r\n    return this.smCalendarDay.disabledFocused;\r\n  }\r\n\r\n  @HostBinding('class.date-selected') get getLastSelectedDate() {\r\n    return this.smCalendarDay.lastSelectedDate;\r\n  }\r\n\r\n  focus() {\r\n    (<HTMLElement>this.host.nativeElement).focus();\r\n  }\r\n}\r\n\r\nconst moment = moment_;\r\n\r\nexport interface CalendarDay {\r\n  dateID: string;\r\n  date: Moment;\r\n  inMonth: boolean;\r\n  isToday: boolean;\r\n  isFromDate: boolean;\r\n  isInRangeFromDate?: boolean;\r\n  isToDate: boolean;\r\n  isLastOfWeek: boolean;\r\n  isInRange: boolean;\r\n  tabIndex: number;\r\n  disabled: boolean;\r\n  disabledFocused: boolean;\r\n  lastSelectedDate: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-calendar-day-view',\r\n  templateUrl: './calendar-day-view.component.html'\r\n})\r\nexport class CalendarDayViewComponent {\r\n  @HostBinding('class.sm-date-picker-calendar-day-view')\r\n  readonly defaultHostClass = true;\r\n\r\n  private _date: Moment;\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(date: Moment) {\r\n    if (date) {\r\n      this._date = date;\r\n      this.internalDate = date;\r\n    }\r\n  }\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    if (date) {\r\n      this._internalDate = date;\r\n      this.setupMonth(\r\n        this.internalDate,\r\n        this.internalDate.month(),\r\n        this.internalDate.year()\r\n      );\r\n      this.setupTabIndex();\r\n    }\r\n  }\r\n\r\n  private _viewOpened = false;\r\n  @Input()\r\n  get viewOpened(): boolean {\r\n    return this._viewOpened;\r\n  }\r\n  set viewOpened(isOpen: boolean) {\r\n    this._viewOpened = isOpen;\r\n    this.focusOnDate();\r\n  }\r\n\r\n  @Input()\r\n  set calendarOpened(isOpen: boolean) {\r\n    if (!isOpen && this.date) {\r\n      this.internalDate = this.date.clone();\r\n      this.internalDateChange.emit(this.internalDate);\r\n    }\r\n  }\r\n\r\n  private _fromDate: Moment;\r\n\r\n  @Input()\r\n  set fromDate(val: Moment) {\r\n    this._fromDate = val;\r\n  }\r\n  get fromDate() {\r\n    return this._fromDate;\r\n  }\r\n  private _toDate: Moment;\r\n\r\n  @Input()\r\n  set toDate(val: Moment) {\r\n    this._toDate = val;\r\n    if (\r\n      this._toDate &&\r\n      this._fromDate &&\r\n      this._toDate.isSame(this._fromDate, 'day')\r\n    )\r\n      this._toDate = this._toDate.add(1, 'day').clone();\r\n  }\r\n  get toDate() {\r\n    return this._toDate;\r\n  }\r\n\r\n  private _disableDateFilter: DatePickerDisableDateFilter;\r\n  @Input()\r\n  set disableDateFilter(callBackFunction: DatePickerDisableDateFilter) {\r\n    this._disableDateFilter = callBackFunction;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get disableDateFilter(): DatePickerDisableDateFilter {\r\n    return this._disableDateFilter;\r\n  }\r\n\r\n  @Input() dayView = false;\r\n  @Input() dayViewID: string;\r\n  @Input() range = false;\r\n\r\n  private _min: number;\r\n  @Input()\r\n  set min(min: number) {\r\n    this._min = min;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get min(): number {\r\n    return this._min;\r\n  }\r\n\r\n  private _max: number;\r\n  @Input()\r\n  set max(max: number) {\r\n    this._max = max;\r\n    this.updateMonths(this.internalDate);\r\n  }\r\n  get max(): number {\r\n    return this._max;\r\n  }\r\n\r\n  @Output() dateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n  @Output() dateSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @Output() fromDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() toDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @ViewChildren(SMDayViewDate) dayButtons: QueryList<SMDayViewDate>;\r\n\r\n  lastSelectedDate: Moment = moment();\r\n  hoverDate: Moment = moment();\r\n  currentDateID: string;\r\n  selectingFromDate = true;\r\n\r\n  daysInMonth: Array<CalendarDay> = [];\r\n  currentFocusDateIndex: number;\r\n\r\n  constructor() {}\r\n\r\n  isValidNewDate(newDate: Moment): boolean {\r\n    if (!this.validBounds(newDate)) return false;\r\n\r\n    return true;\r\n  }\r\n\r\n  validBounds(newDate: Moment): boolean {\r\n    return newDate.isBetween(this.min, this.max, 'day', '[]');\r\n  }\r\n\r\n  resetDP() {\r\n    this._date = null;\r\n    this._fromDate = null;\r\n    this._toDate = null;\r\n    this._viewOpened = false;\r\n    this.dayView = false;\r\n    this.internalDate = moment();\r\n  }\r\n\r\n  updateOnDateChange(date: Moment, keyBoardInteraction?: boolean) {\r\n    if (!keyBoardInteraction) this.internalDate = date.clone();\r\n    this.lastSelectedDate = this.internalDate;\r\n    this.currentDateID =\r\n      this.dayViewID +\r\n      '-' +\r\n      this.lastSelectedDate.month() +\r\n      '-' +\r\n      this.lastSelectedDate.date();\r\n\r\n    if (!keyBoardInteraction) this.setupMonth(date, date.month(), date.year());\r\n    this.updateMonths(date, keyBoardInteraction);\r\n    if (keyBoardInteraction) this.focusOnDate();\r\n  }\r\n\r\n  focusOnDate() {\r\n    setTimeout(() => {\r\n      if (this.dayButtons.toArray()[this.currentFocusDateIndex]) {\r\n        this.dayButtons.toArray()[this.currentFocusDateIndex].focus();\r\n      }\r\n    }, 0);\r\n  }\r\n\r\n  /*\r\n    Sets up the month based on sunday being first day of week to Sat being last day of week\r\n  */\r\n  setupMonth(date: Moment, month: number, year: number) {\r\n    const momentDay = moment()\r\n      .locale(date.locale())\r\n      .month(month)\r\n      .year(year);\r\n    const dayOfMonth = momentDay\r\n      .clone()\r\n      .startOf('month')\r\n      .startOf('week');\r\n    const endOfMonth = momentDay\r\n      .clone()\r\n      .endOf('month')\r\n      .endOf('week');\r\n    this.daysInMonth = [];\r\n    let index = 0;\r\n    while (dayOfMonth.clone().isSameOrBefore(endOfMonth)) {\r\n      const inMonth =\r\n        dayOfMonth.isSameOrAfter(momentDay.clone().startOf('month')) &&\r\n        dayOfMonth.isSameOrBefore(momentDay.clone().endOf('month'));\r\n      const isToday = dayOfMonth.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && dayOfMonth.isSame(this.fromDate, 'day');\r\n      const isToDate =\r\n        this.range && this.toDate && dayOfMonth.isSame(this.toDate, 'day');\r\n      const isLastOfWeek = dayOfMonth.weekday() === 6;\r\n\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n\r\n      const isInRange =\r\n        this.range &&\r\n        (dayOfMonth.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            dayOfMonth.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? dayOfMonth.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + dayOfMonth.month() + '-' + dayOfMonth.date()\r\n        : '';\r\n      let disabled = this.isDateDisabled(dayOfMonth);\r\n\r\n      let disabledFocused = false;\r\n      if (disabled && dayOfMonth.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (dayOfMonth.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      const lastSelectedDate = this.date\r\n        ? dayOfMonth.isSame(this.date, 'day')\r\n        : false;\r\n      const tabIndex = this.wasLastSelected(dayOfMonth) ? 0 : -1;\r\n      this.daysInMonth.push({\r\n        date: dayOfMonth.clone(),\r\n        inMonth: inMonth,\r\n        isToday: isToday,\r\n        isFromDate: isFromDate,\r\n        isToDate: isToDate,\r\n        isLastOfWeek: isLastOfWeek,\r\n        isInRange: isInRange,\r\n        dateID: dateID,\r\n        tabIndex: tabIndex,\r\n        disabled: disabled,\r\n        disabledFocused: disabledFocused,\r\n        lastSelectedDate: lastSelectedDate,\r\n        isInRangeFromDate: isInRangeFromDate\r\n      });\r\n\r\n      dayOfMonth.add(1, 'day');\r\n      index++;\r\n    }\r\n  }\r\n\r\n  resetMonth() {\r\n    this.daysInMonth.forEach(day => {\r\n      day.lastSelectedDate = false;\r\n      day.disabled = this.isDateDisabled(day.date);\r\n    });\r\n  }\r\n\r\n  setupTabIndex() {\r\n    let resetFocus = false;\r\n    this.daysInMonth.forEach(day => {\r\n      if (day.inMonth && !day.disabled && !resetFocus) {\r\n        resetFocus = true;\r\n        day.tabIndex = 0;\r\n      }\r\n    });\r\n  }\r\n\r\n  updateMonths(date: Moment, keyBoardInteraction?: boolean) {\r\n    this.daysInMonth.forEach((day, index) => {\r\n      const inMonth =\r\n        day.date.isSameOrAfter(date.clone().startOf('month')) &&\r\n        day.date.isSameOrBefore(date.clone().endOf('month'));\r\n      const isToday = day.date.isSame(moment(), 'day');\r\n      const isFromDate =\r\n        this.range && this.fromDate && day.date.isSame(this.fromDate, 'day');\r\n      const isInRangeFromDate =\r\n        isFromDate &&\r\n        (this.fromDate.isBefore(this.hoverDate, 'day') ||\r\n          this.fromDate.isBefore(this.toDate));\r\n      const isToDate =\r\n        (this.range && this.toDate && day.date.isSame(this.toDate, 'day')) ||\r\n        (day.date.isAfter(this.fromDate, 'day') &&\r\n          !this.selectingFromDate &&\r\n          day.date.isSame(this.hoverDate, 'day'));\r\n      const isLastOfWeek = day.date.weekday() === 6;\r\n      const isInRange =\r\n        this.range &&\r\n        (day.date.isBetween(this.fromDate, this.toDate) ||\r\n          (!this.selectingFromDate &&\r\n            day.date.isBetween(this.fromDate, this.hoverDate)));\r\n      const dateID = this.dayView\r\n        ? day.date.isSame(date, 'day')\r\n          ? this.dayViewID + '-sm-dp-selected-day'\r\n          : this.dayViewID + '-' + day.date.month() + '-' + day.date.date()\r\n        : '';\r\n      const tabIndex = this.wasLastSelected(day.date) ? 0 : -1;\r\n\r\n      let disabled = this.isDateDisabled(day.date);\r\n      const lastSelectedDate = keyBoardInteraction\r\n        ? day.lastSelectedDate\r\n        : this.date\r\n        ? day.date.isSame(this.date, 'day')\r\n        : false;\r\n      let disabledFocused = false;\r\n      if (disabled && day.date.isSame(date, 'day')) {\r\n        disabledFocused = true;\r\n        disabled = false;\r\n      }\r\n\r\n      if (day.date.isSame(date, 'day')) {\r\n        this.currentFocusDateIndex = index;\r\n      }\r\n\r\n      day.inMonth = inMonth;\r\n      day.isToday = isToday;\r\n      day.isFromDate = isFromDate;\r\n      day.isInRangeFromDate = isInRangeFromDate;\r\n      day.isToDate = isToDate;\r\n      day.isLastOfWeek = isLastOfWeek;\r\n      day.isInRange = isInRange;\r\n      day.dateID = dateID;\r\n      day.tabIndex = tabIndex;\r\n      day.disabled = disabled;\r\n      day.disabledFocused = disabledFocused;\r\n      day.lastSelectedDate = lastSelectedDate;\r\n    });\r\n  }\r\n\r\n  isDateDisabled(date: Moment): boolean {\r\n    let disabled = false;\r\n    if (this.min && this.max)\r\n      disabled = !date.isBetween(this.min, this.max, 'day', '[]');\r\n    else if (this.min) disabled = !date.isBefore(this.min, 'day');\r\n    else if (this.max) disabled = !date.isAfter(this.max, 'day');\r\n    if (this.disableDateFilter) {\r\n      disabled = disabled || this.disableDateFilter(date);\r\n    }\r\n    return disabled;\r\n  }\r\n\r\n  selectDate(d: Moment) {\r\n    if (this.range) {\r\n      this.selectDateRange(d);\r\n    } else {\r\n      this.date = d;\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n    }\r\n  }\r\n\r\n  selectDateRange(d: Moment) {\r\n    if (this.selectingFromDate) {\r\n      this.fromDate = d;\r\n      this.toDate = null;\r\n      this._date = null;\r\n      this.selectingFromDate = false;\r\n      this.updateMonths(d);\r\n      this.fromDateChange.emit(this.fromDate);\r\n    } else {\r\n      this.toDate = moment(this.fromDate).isBefore(d, 'day')\r\n        ? d\r\n        : this.fromDate.clone().add(1, 'day');\r\n      this.fromDateChange.emit(this.fromDate);\r\n      this.toDateChange.emit(this.toDate);\r\n      this.updateOnDateChange(this.validateDate(d));\r\n      this.dateChange.emit(d);\r\n      this.dateSelect.emit(d);\r\n      this.selectingFromDate = true;\r\n    }\r\n  }\r\n\r\n  dateHover(d: Moment, mouseEnter: boolean) {\r\n    this.hoverDate = mouseEnter\r\n      ? d.clone()\r\n      : this.range\r\n      ? this.fromDate\r\n      : this.lastSelectedDate;\r\n    if (this.range) this.updateMonths(d);\r\n  }\r\n\r\n  selectNewMonthDate(newDate: Moment) {\r\n    this.updateOnDateChange(newDate, true);\r\n    this.setupMonth(newDate, newDate.month(), newDate.year());\r\n    this.internalDate = newDate;\r\n    this.internalDateChange.emit(newDate);\r\n  }\r\n\r\n  validateDate(newDate: Moment) {\r\n    return moment(newDate).valueOf() > this.max\r\n      ? moment(this.max)\r\n      : moment(newDate).valueOf() < this.min\r\n      ? moment(this.min)\r\n      : moment(newDate);\r\n  }\r\n\r\n  wasLastSelected(d: Moment) {\r\n    return d.isSame(this.lastSelectedDate, 'day');\r\n  }\r\n\r\n  onKeyDown($event: KeyboardEvent, date: Moment) {\r\n    let newDateID: Moment;\r\n    switch ($event.key) {\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n        newDateID = date.clone().add(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        newDateID = date.clone().subtract(7, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 7]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        newDateID = date.clone().subtract(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex - 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        newDateID = date.clone().add(1, 'day');\r\n        if (!this.daysInMonth[this.currentFocusDateIndex + 1]) {\r\n          this.selectNewMonthDate(newDateID);\r\n          this.lastSelectedDate = newDateID;\r\n          this.updateOnDateChange(newDateID, true);\r\n        }\r\n        break;\r\n      case 'Home':\r\n        newDateID = date.clone().startOf('month');\r\n        break;\r\n      case 'End':\r\n        newDateID = date.clone().endOf('month');\r\n        break;\r\n      case 'PageUp':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().subtract(1, 'year')\r\n          : date.clone().subtract(1, 'month');\r\n        break;\r\n      case 'PageDown':\r\n        newDateID = $event.shiftKey\r\n          ? date.clone().add(1, 'year')\r\n          : date.clone().add(1, 'month');\r\n        break;\r\n    }\r\n\r\n    if (newDateID) {\r\n      const dateBtnID = `${\r\n        this.dayViewID\r\n      }-${newDateID.month()}-${newDateID.date()}`;\r\n      let foundInMonth = false;\r\n      this.hoverDate = newDateID;\r\n      this.dayButtons.forEach((dButton, index: number) => {\r\n        if (this.daysInMonth[index]) {\r\n          const dBtnId =\r\n            this.dayViewID +\r\n            '-' +\r\n            this.daysInMonth[index].date.month() +\r\n            '-' +\r\n            this.daysInMonth[index].date.date();\r\n          if (\r\n            !foundInMonth &&\r\n            dBtnId === dateBtnID &&\r\n            dButton.smCalendarDay.inMonth &&\r\n            newDateID.year() === this.daysInMonth[index].date.year()\r\n          ) {\r\n            foundInMonth = true;\r\n            this.updateOnDateChange(newDateID, true);\r\n          }\r\n        }\r\n      });\r\n\r\n      if (!foundInMonth) {\r\n        this.selectNewMonthDate(newDateID);\r\n        this.lastSelectedDate = newDateID;\r\n        this.updateOnDateChange(newDateID, true);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 227
            },
            "accessors": {
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 109,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "internalDate": {
                    "name": "internalDate",
                    "setSignature": {
                        "name": "internalDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 121,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "viewOpened": {
                    "name": "viewOpened",
                    "setSignature": {
                        "name": "viewOpened",
                        "type": "void",
                        "args": [
                            {
                                "name": "isOpen",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 138,
                        "jsdoctags": [
                            {
                                "name": "isOpen",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "calendarOpened": {
                    "name": "calendarOpened",
                    "setSignature": {
                        "name": "calendarOpened",
                        "type": "void",
                        "args": [
                            {
                                "name": "isOpen",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 144,
                        "jsdoctags": [
                            {
                                "name": "isOpen",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fromDate": {
                    "name": "fromDate",
                    "setSignature": {
                        "name": "fromDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 154,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "fromDate",
                        "type": "",
                        "returnType": "",
                        "line": 157
                    }
                },
                "toDate": {
                    "name": "toDate",
                    "setSignature": {
                        "name": "toDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 163,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "toDate",
                        "type": "",
                        "returnType": "",
                        "line": 172
                    }
                },
                "disableDateFilter": {
                    "name": "disableDateFilter",
                    "setSignature": {
                        "name": "disableDateFilter",
                        "type": "void",
                        "args": [
                            {
                                "name": "callBackFunction",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 178,
                        "jsdoctags": [
                            {
                                "name": "callBackFunction",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "disableDateFilter",
                        "type": "",
                        "returnType": "DatePickerDisableDateFilter",
                        "line": 182
                    }
                },
                "min": {
                    "name": "min",
                    "setSignature": {
                        "name": "min",
                        "type": "void",
                        "args": [
                            {
                                "name": "min",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 192,
                        "jsdoctags": [
                            {
                                "name": "min",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "min",
                        "type": "number",
                        "returnType": "number",
                        "line": 196
                    }
                },
                "max": {
                    "name": "max",
                    "setSignature": {
                        "name": "max",
                        "type": "void",
                        "args": [
                            {
                                "name": "max",
                                "type": "number"
                            }
                        ],
                        "returnType": "void",
                        "line": 202,
                        "jsdoctags": [
                            {
                                "name": "max",
                                "type": "number",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "max",
                        "type": "number",
                        "returnType": "number",
                        "line": 206
                    }
                }
            },
            "templateData": "<div class=\"calendar-day-view-weeks\">\r\n  <button\r\n    *ngFor=\"let d of daysInMonth\"\r\n    type=\"button\"\r\n    [id]=\"\r\n      d.dateID\r\n        ? d.dateID\r\n        : dayViewID + '-' + d.date.month() + '-' + d.date.date()\r\n    \"\r\n    [smCalendarDay]=\"d\"\r\n    (click)=\"selectDate(d.date)\"\r\n    [disabled]=\"d.disabled ? true : null\"\r\n    (keydown)=\"onKeyDown($event, d.date)\"\r\n    (mouseenter)=\"dateHover(d.date, true)\"\r\n    (mouseleave)=\"dateHover(d.date, false)\"\r\n    attr.aria-label=\"{{ d.date | smDate: 'dddd, MMMM Do YYYY' }} {{\r\n      d.disabled || d.disabledFocused ? 'disabled' : ''\r\n    }}\"\r\n  >\r\n    {{ d.date.date() }}\r\n    <span *ngIf=\"d.isInRangeFromDate\" class=\"fromDate\"></span>\r\n    <span *ngIf=\"d.isToDate\" class=\"toDate\"></span>\r\n    <span\r\n      *ngIf=\"d.isInRange && !d.isToDate && !d.isFromDate\"\r\n      class=\"inRange\"\r\n    ></span>\r\n  </button>\r\n</div>"
        },
        {
            "name": "CalendarNavComponent",
            "id": "component-CalendarNavComponent-ba789113258234c347284306fbdf69b7",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-calendar-nav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabelNextMonth",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "ariaLabelPrevMonth",
                    "line": 38,
                    "type": "string"
                },
                {
                    "name": "dayView",
                    "defaultValue": "true",
                    "line": 34
                },
                {
                    "name": "internalDate",
                    "line": 17,
                    "type": "Moment"
                },
                {
                    "name": "navID",
                    "line": 35,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "dayViewChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 43,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "internalDateChange",
                    "defaultValue": "new EventEmitter<\r\n    Moment\r\n  >()",
                    "line": 40,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_internalDate",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "currentDateLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "daysOfWeekLabel",
                    "type": "Array<string>",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "monthViewLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "nextMonthLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "prevMonthLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "changeView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "selectLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96
                },
                {
                    "name": "selectRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "updateLabel",
                    "args": [
                        {
                            "name": "label",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "label",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateMonthLabel",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "modifierKind": [
                        114
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateWeekdaysLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-date-picker-calendar-nav",
                    "defaultValue": "true",
                    "line": 13
                },
                {
                    "name": "class.sm-date-picker-calendar-nav--year-view",
                    "line": 30
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { HostBinding } from '@angular/core';\r\nimport { Component, Input, Output, EventEmitter, OnInit } from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: 'sm-calendar-nav',\r\n  templateUrl: './calendar-nav.component.html'\r\n})\r\nexport class CalendarNavComponent implements OnInit {\r\n  @HostBinding('class.sm-date-picker-calendar-nav')\r\n  readonly defaultHostClass = true;\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    this._internalDate = date;\r\n    this.currentDateLabel = this._internalDate\r\n      .clone()\r\n      .format('dddd, MMMM Do YYYY');\r\n    this.updateWeekdaysLabel();\r\n    this.updateMonthLabel(date);\r\n  }\r\n\r\n  @HostBinding('class.sm-date-picker-calendar-nav--year-view')\r\n  get getYearView() {\r\n    return !this.dayView;\r\n  }\r\n\r\n  @Input() dayView = true;\r\n  @Input() navID: string;\r\n\r\n  @Input() ariaLabelNextMonth: string;\r\n  @Input() ariaLabelPrevMonth: string;\r\n\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n  @Output() dayViewChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  prevMonthLabel: string;\r\n  nextMonthLabel: string;\r\n  monthViewLabel: string;\r\n\r\n  daysOfWeekLabel: Array<string>;\r\n  currentDateLabel: string;\r\n\r\n  constructor() {\r\n    this.daysOfWeekLabel = moment\r\n      .weekdaysMin(true)\r\n      .map(str => str.substr(0, 1).toUpperCase());\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (!!this.internalDate) {\r\n      this.updateWeekdaysLabel();\r\n      this.monthViewLabel = this.internalDate.clone().format('MMMM');\r\n      this.currentDateLabel = this.internalDate\r\n        .clone()\r\n        .format('dddd, MMMM Do YYYY');\r\n      this.prevMonthLabel = this.internalDate\r\n        .clone()\r\n        .subtract(1, 'month')\r\n        .format('dddd, MMMM Do YYYY');\r\n      this.nextMonthLabel = this.internalDate\r\n        .clone()\r\n        .add(1, 'month')\r\n        .format('dddd, MMMM Do YYYY');\r\n    }\r\n  }\r\n\r\n  updateWeekdaysLabel() {\r\n    this.daysOfWeekLabel = (this.internalDate.localeData() as any)\r\n      .weekdaysMin(true)\r\n      .map(str => str.substr(0, 1).toUpperCase());\r\n  }\r\n\r\n  updateLabel(label: string) {\r\n    if (label === 'prev') {\r\n      this.prevMonthLabel = this.internalDate\r\n        .clone()\r\n        .subtract(1, 'month')\r\n        .format('dddd, MMMM Do YYYY');\r\n    } else {\r\n      this.nextMonthLabel = this.internalDate\r\n        .clone()\r\n        .add(1, 'month')\r\n        .format('dddd, MMMM Do YYYY');\r\n    }\r\n  }\r\n\r\n  selectLeft() {\r\n    if (this.dayView) {\r\n      const newDate = this.internalDate.clone().subtract(1, 'month');\r\n      this.internalDate = newDate;\r\n      this.internalDateChange.emit(this.internalDate);\r\n    } else {\r\n      this.internalDate = this.internalDate.clone().subtract(1, 'year');\r\n      this.internalDateChange.emit(this.internalDate);\r\n    }\r\n\r\n    this.monthViewLabel = this.internalDate.format('MMMM');\r\n  }\r\n\r\n  selectRight() {\r\n    if (this.dayView) {\r\n      const newDate = this.internalDate.clone().add(1, 'month');\r\n      this.internalDate = newDate;\r\n      this.internalDateChange.emit(this.internalDate);\r\n    } else {\r\n      this.internalDate = this.internalDate.clone().add(1, 'year');\r\n      this.internalDateChange.emit(this.internalDate);\r\n    }\r\n    this.monthViewLabel = this.internalDate.format('MMMM');\r\n  }\r\n\r\n  public updateMonthLabel(date?: Moment) {\r\n    this.monthViewLabel = date\r\n      ? date.format('MMMM')\r\n      : this.internalDate\r\n      ? this.internalDate.format('MMMM')\r\n      : moment().format('MMMM');\r\n  }\r\n\r\n  changeView() {\r\n    this.dayView = !this.dayView;\r\n    this.dayViewChange.emit(this.dayView);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 50
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "internalDate": {
                    "name": "internalDate",
                    "setSignature": {
                        "name": "internalDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 20,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<button *ngIf=\"dayView\" type=\"button\" [id]=\"navID + '-nav-left'\" class=\"calendar-nav-arrows-left\"\r\n  (focus)=\"updateLabel('prev')\" (click)=\"selectLeft(); updateLabel('prev')\" aria-live=\"polite\"\r\n  attr.aria-label=\"{{ ariaLabelPrevMonth }} {{ prevMonthLabel }}\">\r\n  <svg width=\"32\" height=\"32\" viewBox=\"0 0 228 228\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M114 227L114 1.49992V0.999918\" stroke=\"black\" />\r\n    <path d=\"M114 227.137L0.863045 114L114 0.862868\" stroke=\"black\" />\r\n  </svg>\r\n</button>\r\n<div class=\"calendar-nav-date\">\r\n  <div class=\"calendar-nav-date--view-links\">\r\n    <button type=\"button\" [id]=\"navID + '-nav-month'\" [disabled]=\"dayView ? true : false\" role=\"navigation\"\r\n      [tabindex]=\"dayView ? -1 : 0\" [attr.activeView]=\"dayView\" class=\"calendar-nav-date-link\" (click)=\"changeView()\"\r\n      attr.aria-label=\"Day view {{ currentDateLabel }}\">\r\n      {{ monthViewLabel }}\r\n    </button>\r\n    <button type=\"button\" [id]=\"navID + '-nav-year'\" [disabled]=\"!dayView ? true : false\" role=\"navigation\"\r\n      [tabindex]=\"!dayView ? -1 : 0\" [attr.activeView]=\"!dayView\" class=\"calendar-nav-date-link\" (click)=\"changeView()\"\r\n      attr.aria-label=\"Year view {{ currentDateLabel }}\">\r\n      {{ internalDate | smDate: 'YYYY' }}\r\n    </button>\r\n  </div>\r\n</div>\r\n<button *ngIf=\"dayView\" type=\"button\" [id]=\"navID + '-nav-right'\" class=\"calendar-nav-arrows-right\"\r\n  (focus)=\"updateLabel('next')\" (click)=\"selectRight(); updateLabel('next')\" aria-live=\"polite\"\r\n  attr.aria-label=\"{{ ariaLabelNextMonth }} {{ nextMonthLabel }}\">\r\n  <svg width=\"32\" height=\"32\" viewBox=\"0 0 228 228\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n    <path d=\"M114 1V226.5V227\" stroke=\"black\" />\r\n    <path d=\"M114 0.8629L227.137 114L114 227.137\" stroke=\"black\" />\r\n  </svg>\r\n</button>\r\n\r\n<div class=\"calendar-nav-header\" *ngIf=\"dayView\">\r\n  <span *ngFor=\"let d of daysOfWeekLabel\" class=\"calendar-nav-header-unit\">{{\r\n    d\r\n  }}</span>\r\n</div>"
        },
        {
            "name": "CalendarYearViewComponent",
            "id": "component-CalendarYearViewComponent-3ba6106c111370cb3d9f00428dbd8af6",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-calendar-year-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./calendar-year-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "date",
                    "line": 36,
                    "type": "Moment"
                },
                {
                    "name": "internalDate",
                    "line": 46,
                    "type": "Moment"
                },
                {
                    "name": "max",
                    "line": 60,
                    "type": "number"
                },
                {
                    "name": "min",
                    "line": 59,
                    "type": "number"
                },
                {
                    "name": "yearView",
                    "line": 66,
                    "type": "boolean"
                },
                {
                    "name": "yearViewID",
                    "line": 58,
                    "type": "string"
                }
            ],
            "outputsClass": [
                {
                    "name": "internalDateChange",
                    "defaultValue": "new EventEmitter<\r\n    Moment\r\n  >()",
                    "line": 85,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "yearSelect",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 84,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_internalDate",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_yearView",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "endYear",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollDirection",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "scrollOffset",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "startYear",
                    "defaultValue": "-150",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "yearButtons",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "",
                    "line": 89,
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'yearButtons'"
                        }
                    ]
                },
                {
                    "name": "years",
                    "type": "Array<Year>",
                    "optional": false,
                    "description": "",
                    "line": 91
                }
            ],
            "methodsClass": [
                {
                    "name": "addYear",
                    "args": [
                        {
                            "name": "i",
                            "type": "number"
                        },
                        {
                            "name": "unshift",
                            "type": "boolean",
                            "optional": true
                        },
                        {
                            "name": "fromYear",
                            "type": "number",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "jsdoctags": [
                        {
                            "name": "i",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "unshift",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fromYear",
                            "type": "number",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "endYearsInView",
                    "args": [
                        {
                            "name": "filterMaxYears",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 294,
                    "jsdoctags": [
                        {
                            "name": "filterMaxYears",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focusOnSelectedDay",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250
                },
                {
                    "name": "maxYearHit",
                    "args": [
                        {
                            "name": "number",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 325,
                    "jsdoctags": [
                        {
                            "name": "number",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "minYearHit",
                    "args": [
                        {
                            "name": "number",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 321,
                    "jsdoctags": [
                        {
                            "name": "number",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent"
                        },
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 263,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectedYear",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 239,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectNewYear",
                    "args": [
                        {
                            "name": "year",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "jsdoctags": [
                        {
                            "name": "year",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateYears",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateYearsOnScroll",
                    "args": [
                        {
                            "name": "direction",
                            "type": "number"
                        },
                        {
                            "name": "scrollMultiplier",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 329,
                    "jsdoctags": [
                        {
                            "name": "direction",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scrollMultiplier",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-date-picker-calendar-year-view",
                    "defaultValue": "true",
                    "line": 32
                }
            ],
            "hostListeners": [
                {
                    "name": "scroll",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 346
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {\r\n  OnInit,\r\n  Output,\r\n  EventEmitter,\r\n  QueryList,\r\n  ViewChildren,\r\n  ElementRef,\r\n  HostBinding,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { Component, Input, HostListener } from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\nexport interface Year {\r\n  date: Moment;\r\n  year: number;\r\n  today: boolean;\r\n  tabIndex: number;\r\n  dateID: string;\r\n  disabled: boolean;\r\n  disabledFocus: boolean;\r\n  selectedDate: boolean;\r\n}\r\n@Component({\r\n  selector: 'sm-calendar-year-view',\r\n  templateUrl: './calendar-year-view.component.html'\r\n})\r\nexport class CalendarYearViewComponent implements OnInit {\r\n  @HostBinding('class.sm-date-picker-calendar-year-view')\r\n  readonly defaultHostClass = true;\r\n  private _date: Moment;\r\n\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(value: Moment) {\r\n    this._date = !!value ? value : null;\r\n    if (this._date && this._date.year() > 9999) this._date.set('year', 9999);\r\n  }\r\n\r\n  private _internalDate: Moment;\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    this._internalDate = date;\r\n    this.startYear = -150;\r\n    this.endYear = 100;\r\n    if (this._internalDate && this._internalDate.year() > 9999)\r\n      this._internalDate.set('year', 9999);\r\n    this.updateYears(date);\r\n  }\r\n\r\n  @Input() yearViewID: string;\r\n  @Input() min: number;\r\n  @Input() max: number;\r\n\r\n  private _yearView = false;\r\n\r\n  @HostBinding('class.opened')\r\n  @Input()\r\n  get yearView(): boolean {\r\n    return this._yearView;\r\n  }\r\n  set yearView(yearView: boolean) {\r\n    this._yearView = yearView;\r\n    if (this._yearView) {\r\n      this.startYear = -150;\r\n      this.endYear = 100;\r\n      this.updateYears();\r\n      this.focusOnSelectedDay();\r\n    }\r\n  }\r\n\r\n  private scrollDirection = 0;\r\n  private scrollOffset = 0;\r\n  private startYear = -150;\r\n  private endYear = 100;\r\n\r\n  @Output() yearSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() internalDateChange: EventEmitter<Moment> = new EventEmitter<\r\n    Moment\r\n  >();\r\n\r\n  @ViewChildren('yearButtons') yearButtons: QueryList<ElementRef>;\r\n\r\n  years: Array<Year>;\r\n\r\n  constructor(private element: ElementRef, private renderer: Renderer2) {}\r\n\r\n  ngOnInit() {\r\n    this.updateYears();\r\n    this.focusOnSelectedDay();\r\n  }\r\n\r\n  updateYears(newDate?: Moment) {\r\n    if (newDate) {\r\n      this._internalDate = newDate;\r\n    }\r\n\r\n    if (!!this.internalDate) {\r\n      this.years = [];\r\n      for (let i = this.startYear; i < this.endYear; i++) {\r\n        if (\r\n          i + this.internalDate.year() >= 0 &&\r\n          i + this.internalDate.year() <= 9999\r\n        )\r\n          this.addYear(i);\r\n      }\r\n    }\r\n  }\r\n\r\n  addYear(i: number, unshift?: boolean, fromYear?: number) {\r\n    const currentYear = fromYear ? fromYear : this.internalDate.year();\r\n    const newDate = fromYear\r\n      ? moment().set('year', fromYear)\r\n      : this.internalDate.clone();\r\n    if (unshift) {\r\n      this.years.unshift({\r\n        date: newDate.clone().add(i, 'year'),\r\n        year: currentYear + i,\r\n        today: moment().year() === currentYear + i,\r\n        tabIndex:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? 0\r\n            : -1,\r\n        dateID:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? this.yearViewID + '-sm-dp-selected-day'\r\n            : this.yearViewID +\r\n              '-' +\r\n              newDate\r\n                .clone()\r\n                .add(i, 'year')\r\n                .year(),\r\n        selectedDate: this.date\r\n          ? newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .year() === this.date.year()\r\n          : false,\r\n        disabled:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() !== newDate.year(),\r\n        disabledFocus:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n      });\r\n    } else {\r\n      this.years.push({\r\n        date: newDate.clone().add(i, 'year'),\r\n        year: currentYear + i,\r\n        today: moment().year() === currentYear + i,\r\n        tabIndex:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? 0\r\n            : -1,\r\n        dateID:\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n            ? this.yearViewID + '-sm-dp-selected-day'\r\n            : this.yearViewID +\r\n              '-' +\r\n              newDate\r\n                .clone()\r\n                .add(i, 'year')\r\n                .year(),\r\n        selectedDate: this.date\r\n          ? newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .year() === this.date.year()\r\n          : false,\r\n        disabled:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() !== newDate.year(),\r\n        disabledFocus:\r\n          (newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .valueOf() < this.min ||\r\n            newDate\r\n              .clone()\r\n              .add(i, 'year')\r\n              .valueOf() > this.max) &&\r\n          newDate\r\n            .clone()\r\n            .add(i, 'year')\r\n            .year() === newDate.year()\r\n      });\r\n    }\r\n  }\r\n\r\n  selectedYear(date: Moment) {\r\n    this.yearSelect.emit(date);\r\n  }\r\n\r\n  selectNewYear(year: Moment) {\r\n    this.internalDate = year;\r\n    this.internalDateChange.emit(year);\r\n    this.updateYears();\r\n    this.focusOnSelectedDay();\r\n  }\r\n\r\n  focusOnSelectedDay() {\r\n    setTimeout(() => {\r\n      this.yearButtons.forEach(year => {\r\n        if (\r\n          (<HTMLElement>year.nativeElement).id ===\r\n          `${this.yearViewID}-sm-dp-selected-day`\r\n        ) {\r\n          (<HTMLElement>year.nativeElement).focus();\r\n        }\r\n      });\r\n    }, 0);\r\n  }\r\n\r\n  onKeyDown($event: KeyboardEvent, date: Moment) {\r\n    let newDateID: Moment;\r\n    switch ($event.key) {\r\n      case 'ArrowRight':\r\n      case 'Right':\r\n        newDateID = date.clone().add(4, 'year');\r\n        break;\r\n      case 'ArrowLeft':\r\n      case 'Left':\r\n        newDateID = date.clone().subtract(4, 'year');\r\n        break;\r\n      case 'ArrowUp':\r\n      case 'Up':\r\n        newDateID = date.clone().subtract(1, 'year');\r\n        break;\r\n      case 'ArrowDown':\r\n      case 'Down':\r\n        newDateID = date.clone().add(1, 'year');\r\n        break;\r\n    }\r\n\r\n    if (newDateID) {\r\n      const dateBtnID = `${this.yearViewID}-${newDateID.year()}`;\r\n      this.yearButtons.forEach(year => {\r\n        if ((<HTMLElement>year.nativeElement).id === dateBtnID) {\r\n          this.selectNewYear(newDateID);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  endYearsInView(filterMaxYears: boolean): boolean {\r\n    let yearInView = false;\r\n    const calendarElement = (<HTMLElement>(\r\n      this.element.nativeElement\r\n    )).getBoundingClientRect();\r\n    this.yearButtons\r\n      .filter((item, index) => {\r\n        return filterMaxYears\r\n          ? index >= this.yearButtons.length - 30\r\n          : index < 30;\r\n      })\r\n      .forEach(elmt => {\r\n        const buttomElement = (<HTMLElement>(\r\n          elmt.nativeElement\r\n        )).getBoundingClientRect();\r\n        if (\r\n          buttomElement.top >= calendarElement.top &&\r\n          buttomElement.bottom <= calendarElement.bottom\r\n        ) {\r\n          yearInView = yearInView || true;\r\n        }\r\n      });\r\n\r\n    return yearInView;\r\n  }\r\n\r\n  /* Scrolling functionality below: */\r\n  minYearHit(number): boolean {\r\n    return this.years[0].year + number < 0;\r\n  }\r\n\r\n  maxYearHit(number): boolean {\r\n    return this.years[this.years.length - 1].year + number > 9999;\r\n  }\r\n\r\n  updateYearsOnScroll(direction: number, scrollMultiplier: number) {\r\n    let boundsHit = direction < 0 ? !this.minYearHit(-1) : !this.maxYearHit(1);\r\n    for (let i = 0; boundsHit && i < Math.round(scrollMultiplier); i++) {\r\n      this.startYear += direction;\r\n      this.endYear += direction;\r\n      if (direction < 0) {\r\n        this.addYear(-1, true, this.years[0].year);\r\n        this.years.pop();\r\n      } else {\r\n        this.years.shift();\r\n        this.addYear(1, false, this.years[this.years.length - 1].year);\r\n      }\r\n      boundsHit = direction < 0 ? !this.minYearHit(-1) : !this.maxYearHit(1);\r\n    }\r\n  }\r\n\r\n  @HostListener('scroll', ['$event'])\r\n  onScroll($event): void {\r\n    const scrollDown = this.scrollDirection < $event.target.scrollTop;\r\n    const yearViewHeight = 260; //year button x5\r\n\r\n    this.scrollOffset =\r\n      this.scrollOffset === 0 ? $event.target.scrollTop : this.scrollOffset;\r\n\r\n    this.scrollDirection = $event.target.scrollTop;\r\n\r\n    if (scrollDown) {\r\n      if (!this.endYearsInView(false)) {\r\n        if (this.scrollDirection - this.scrollOffset > yearViewHeight) {\r\n          const scrollMultiplier =\r\n            (this.scrollDirection - this.scrollOffset) / 40;\r\n          this.scrollOffset = 0;\r\n          this.updateYearsOnScroll(1, scrollMultiplier);\r\n        }\r\n      } else {\r\n        this.scrollOffset = 0;\r\n      }\r\n    } else {\r\n      if (!this.endYearsInView(true)) {\r\n        if (this.scrollOffset - this.scrollDirection > yearViewHeight) {\r\n          const scrollMultiplier =\r\n            (this.scrollOffset - this.scrollDirection) / 40;\r\n          this.scrollOffset = 0;\r\n          this.updateYearsOnScroll(-1, scrollMultiplier);\r\n        }\r\n      } else {\r\n        this.scrollOffset = 0;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 91,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "internalDate": {
                    "name": "internalDate",
                    "setSignature": {
                        "name": "internalDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 49,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "yearView": {
                    "name": "yearView",
                    "setSignature": {
                        "name": "yearView",
                        "type": "void",
                        "args": [
                            {
                                "name": "yearView",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "yearView",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<ng-container *ngIf=\"yearView\">\r\n  <button\r\n    *ngFor=\"let y of years; let i = index\"\r\n    #yearButtons\r\n    type=\"button\"\r\n    [id]=\"y.dateID\"\r\n    class=\"calendar-year-view-years\"\r\n    [tabindex]=\"y.tabIndex\"\r\n    [disabled]=\"y.disabled ? true : null\"\r\n    [attr.today]=\"y.today ? '' : null\"\r\n    [attr.disabledFocus]=\"y.disabledFocus ? '' : null\"\r\n    [attr.selectedDate]=\"y.selectedDate ? '' : null\"\r\n    (click)=\"selectedYear(y.date)\"\r\n    (keydown)=\"onKeyDown($event, y.date)\"\r\n  >\r\n    {{ y.year }}\r\n  </button>\r\n</ng-container>\r\n"
        },
        {
            "name": "DatePickerCalendarComponent",
            "id": "component-DatePickerCalendarComponent-635f5e1e683e707dbab26d4bd95579f0",
            "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-date-picker-calendar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker-calendar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabelNextMonth",
                    "line": 66,
                    "type": "string"
                },
                {
                    "name": "ariaLabelPrevMonth",
                    "line": 67,
                    "type": "string"
                },
                {
                    "name": "calendarID",
                    "line": 65,
                    "type": "string"
                },
                {
                    "name": "date",
                    "line": 38,
                    "type": "Moment"
                },
                {
                    "name": "disableDateFilter",
                    "line": 70,
                    "type": "DatePickerDisableDateFilter"
                },
                {
                    "name": "fromDate",
                    "line": 49,
                    "type": "Moment"
                },
                {
                    "name": "internalDate",
                    "line": 30,
                    "type": "Moment"
                },
                {
                    "name": "max",
                    "line": 69,
                    "type": "number"
                },
                {
                    "name": "min",
                    "line": 68,
                    "type": "number"
                },
                {
                    "name": "open",
                    "line": 55,
                    "type": "boolean"
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "line": 51
                },
                {
                    "name": "toDate",
                    "line": 50,
                    "type": "Moment"
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 72,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "dateSelect",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 73,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "fromDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 74,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "toDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 75,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_internalDate",
                    "defaultValue": "moment()",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_open",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "clearLabel",
                    "defaultValue": "'Reset'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "dayView",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "dayViewComponent",
                    "type": "CalendarDayViewComponent",
                    "optional": false,
                    "description": "",
                    "line": 78,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CalendarDayViewComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "elRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "locale",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 88,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "navComponent",
                    "type": "CalendarNavComponent",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CalendarNavComponent, {static: true}"
                        }
                    ]
                },
                {
                    "name": "yearViewComponent",
                    "type": "CalendarYearViewComponent",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CalendarYearViewComponent, {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "dateChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateSelected",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fromDateChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toDateChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "viewChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "yearSelected",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.hidden",
                    "line": 95
                },
                {
                    "name": "class.sm-date-picker-calendar",
                    "defaultValue": "true",
                    "line": 26
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DatePickerDisableDateFilter } from './../date.filters';\r\nimport { CalendarYearViewComponent } from './calendar-year-view/calendar-year-view.component';\r\nimport { CalendarNavComponent } from './calendar-nav/calendar-nav.component';\r\nimport {\r\n  Component,\r\n  Input,\r\n  HostBinding,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  Inject,\r\n  LOCALE_ID,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { CalendarDayViewComponent } from './calendar-day-view/calendar-day-view.component';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: 'sm-date-picker-calendar',\r\n  templateUrl: './date-picker-calendar.component.html'\r\n})\r\nexport class DatePickerCalendarComponent {\r\n  @HostBinding('class.sm-date-picker-calendar')\r\n  readonly defaultHostClass = true;\r\n\r\n  private _internalDate: Moment = moment();\r\n  @Input()\r\n  get internalDate(): Moment {\r\n    return this._internalDate;\r\n  }\r\n  set internalDate(date: Moment) {\r\n    this._internalDate = date;\r\n  }\r\n  private _date: Moment;\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(date: Moment) {\r\n    if (date) {\r\n      this._date = date;\r\n      this.internalDate = date;\r\n    }\r\n    if (this.dayViewComponent) this.dayViewComponent.internalDate = date;\r\n  }\r\n\r\n  @Input() fromDate: Moment;\r\n  @Input() toDate: Moment;\r\n  @Input() range = false;\r\n\r\n  private _open = false;\r\n  @Input()\r\n  get open(): boolean {\r\n    return this._open;\r\n  }\r\n  set open(open: boolean) {\r\n    this.dayView = this.open ? this.dayView : true;\r\n    this._open = open;\r\n  }\r\n\r\n  clearLabel = 'Reset';\r\n\r\n  @Input() calendarID: string;\r\n  @Input() ariaLabelNextMonth: string;\r\n  @Input() ariaLabelPrevMonth: string;\r\n  @Input() min: number;\r\n  @Input() max: number;\r\n  @Input() disableDateFilter: DatePickerDisableDateFilter;\r\n\r\n  @Output() dateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() dateSelect: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() fromDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() toDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n\r\n  @ViewChild(CalendarDayViewComponent, { static: false })\r\n  dayViewComponent: CalendarDayViewComponent;\r\n  @ViewChild(CalendarYearViewComponent, { static: true })\r\n  yearViewComponent: CalendarYearViewComponent;\r\n  @ViewChild(CalendarNavComponent, { static: true })\r\n  navComponent: CalendarNavComponent;\r\n\r\n  dayView = true;\r\n\r\n  constructor(\r\n    public elRef: ElementRef,\r\n    @Inject(LOCALE_ID) public locale: string\r\n  ) {\r\n    if (this.locale.slice(0, 2) === 'fr') {\r\n      this.clearLabel = 'Effacer';\r\n    }\r\n  }\r\n\r\n  @HostBinding('class.hidden') get calendarOpen() {\r\n    return !this.open;\r\n  }\r\n\r\n  dateChanged($event: Moment) {\r\n    this.date = $event;\r\n    this.dateChange.emit(this.date);\r\n    if (this.navComponent) {\r\n      this.navComponent.updateMonthLabel(this.date);\r\n    }\r\n    if (this.yearViewComponent) {\r\n      this.yearViewComponent.updateYears(this.date);\r\n    }\r\n  }\r\n\r\n  viewChanged($event: boolean) {\r\n    this.dayView = $event;\r\n  }\r\n\r\n  fromDateChanged($event: Moment) {\r\n    this.fromDateChange.emit($event);\r\n  }\r\n\r\n  toDateChanged($event: Moment) {\r\n    this.toDateChange.emit($event);\r\n  }\r\n\r\n  dateSelected($event: Moment) {\r\n    this.dateSelect.emit($event);\r\n  }\r\n\r\n  yearSelected($event: Moment) {\r\n    this.dayView = true;\r\n    this.internalDate = $event;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "locale",
                        "type": "string"
                    }
                ],
                "line": 84,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "internalDate": {
                    "name": "internalDate",
                    "setSignature": {
                        "name": "internalDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 33,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "date",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 41,
                        "jsdoctags": [
                            {
                                "name": "date",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "args": [
                            {
                                "name": "open",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 58,
                        "jsdoctags": [
                            {
                                "name": "open",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<sm-calendar-nav\r\n  [navID]=\"calendarID\"\r\n  [ariaLabelPrevMonth]=\"ariaLabelPrevMonth\"\r\n  [ariaLabelNextMonth]=\"ariaLabelNextMonth\"\r\n  [dayView]=\"dayView\"\r\n  (dayViewChange)=\"viewChanged($event)\"\r\n  [(internalDate)]=\"internalDate\"\r\n></sm-calendar-nav>\r\n<sm-calendar-day-view\r\n  [calendarOpened]=\"open\"\r\n  [viewOpened]=\"dayView && open\"\r\n  [dayView]=\"dayView\"\r\n  [(internalDate)]=\"internalDate\"\r\n  [min]=\"min\"\r\n  [max]=\"max\"\r\n  [hidden]=\"!dayView\"\r\n  [range]=\"range\"\r\n  [dayViewID]=\"calendarID\"\r\n  [date]=\"date\"\r\n  [fromDate]=\"fromDate\"\r\n  [toDate]=\"toDate\"\r\n  [disableDateFilter]=\"disableDateFilter\"\r\n  (dateChange)=\"dateChanged($event)\"\r\n  (fromDateChange)=\"fromDateChanged($event)\"\r\n  (toDateChange)=\"toDateChanged($event)\"\r\n  (dateSelect)=\"dateSelected($event)\"\r\n>\r\n</sm-calendar-day-view>\r\n<sm-calendar-year-view\r\n  [yearView]=\"!dayView && open\"\r\n  [date]=\"date\"\r\n  [(internalDate)]=\"internalDate\"\r\n  [min]=\"min\"\r\n  [max]=\"max\"\r\n  [yearViewID]=\"calendarID\"\r\n  (yearSelect)=\"yearSelected($event)\"\r\n>\r\n</sm-calendar-year-view>"
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-dd8638d59702590cf8c00c8e54f02373",
            "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => DatePickerComponent), multi: true\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => DatePickerComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sm-date-picker",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "ariaLabelNextMonth",
                    "defaultValue": "'Next'",
                    "line": 99
                },
                {
                    "name": "ariaLabelPrevMonth",
                    "defaultValue": "'Previous'",
                    "line": 98
                },
                {
                    "name": "calendarViewLabel",
                    "defaultValue": "'Calendar view'",
                    "line": 100
                },
                {
                    "name": "date",
                    "line": 65,
                    "type": "DateType"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 108
                },
                {
                    "name": "disableDateFilter",
                    "line": 126,
                    "type": "DatePickerDisableDateFilter"
                },
                {
                    "name": "displayFormat",
                    "defaultValue": "'ll'",
                    "line": 111
                },
                {
                    "name": "dpID",
                    "defaultValue": "`sm-dp-${uniqueInputId++}`",
                    "line": 97
                },
                {
                    "name": "error",
                    "line": 117,
                    "type": "boolean"
                },
                {
                    "name": "fromDate",
                    "line": 75,
                    "type": "DateType"
                },
                {
                    "name": "inputFormat",
                    "defaultValue": "'ll'",
                    "line": 110,
                    "type": "string | string[]"
                },
                {
                    "name": "inputLabel",
                    "defaultValue": "''",
                    "line": 107
                },
                {
                    "name": "inputPlaceholder",
                    "defaultValue": "''",
                    "line": 109
                },
                {
                    "name": "max",
                    "defaultValue": "moment()\r\n    .add(100, 'years')\r\n    .valueOf()",
                    "line": 104,
                    "type": "number"
                },
                {
                    "name": "min",
                    "defaultValue": "moment()\r\n    .subtract(150, 'years')\r\n    .valueOf()",
                    "line": 101,
                    "type": "number"
                },
                {
                    "name": "open",
                    "defaultValue": "false",
                    "line": 95
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "line": 96
                },
                {
                    "name": "resetOnError",
                    "defaultValue": "false",
                    "line": 113
                },
                {
                    "name": "strictMode",
                    "defaultValue": "false",
                    "line": 112
                },
                {
                    "name": "toDate",
                    "line": 85,
                    "type": "DateType"
                },
                {
                    "name": "utc",
                    "defaultValue": "false",
                    "line": 94
                }
            ],
            "outputsClass": [
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<DateType>()",
                    "line": 129,
                    "type": "EventEmitter<DateType>"
                },
                {
                    "name": "errorChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 128,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "fromDateChange",
                    "defaultValue": "new EventEmitter<\r\n    DateType\r\n  >()",
                    "line": 130,
                    "type": "EventEmitter<DateType>"
                },
                {
                    "name": "toDateChange",
                    "defaultValue": "new EventEmitter<DateType>()",
                    "line": 133,
                    "type": "EventEmitter<DateType>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_date",
                    "type": "DateType",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_error",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "_fromDate",
                    "type": "DateType",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "_toDate",
                    "type": "DateType",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dateWasSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 142
                },
                {
                    "name": "dpCalendar",
                    "type": "DatePickerCalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 136,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DatePickerCalendarComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "dpInput",
                    "type": "DatePickerInputComponent",
                    "optional": false,
                    "description": "",
                    "line": 138,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DatePickerInputComponent, {static: false}"
                        }
                    ]
                },
                {
                    "name": "initialDate",
                    "type": "DateType",
                    "optional": false,
                    "description": "",
                    "line": 140
                },
                {
                    "name": "initialDateType",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 141
                },
                {
                    "name": "locale",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 144,
                    "decorators": [
                        {
                            "name": "Inject",
                            "stringifiedArguments": "LOCALE_ID"
                        }
                    ],
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 189
                }
            ],
            "methodsClass": [
                {
                    "name": "calenderViewOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 363
                },
                {
                    "name": "checkValidRange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299
                },
                {
                    "name": "convertDatesToMoments",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 413
                },
                {
                    "name": "convertToMoment",
                    "args": [
                        {
                            "name": "date",
                            "type": "DateType"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 428,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "DateType",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "dateSelected",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228
                },
                {
                    "name": "emitEventBasedOnType",
                    "args": [
                        {
                            "name": "eventEmitter",
                            "type": "EventEmitter<DateType>"
                        },
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 449,
                    "jsdoctags": [
                        {
                            "name": "eventEmitter",
                            "type": "EventEmitter<DateType>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 483
                },
                {
                    "name": "fromDateChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 243,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initDates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 176
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 157
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 163,
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 392,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEscape",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 405,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 191,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199
                },
                {
                    "name": "resetCalendarView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346
                },
                {
                    "name": "resetDates",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 312
                },
                {
                    "name": "resetDP",
                    "args": [
                        {
                            "name": "closeDp",
                            "type": "Boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 327,
                    "jsdoctags": [
                        {
                            "name": "closeDp",
                            "type": "Boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setInitialDateType",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 374
                },
                {
                    "name": "toDateChanged",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Moment"
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateDPInput",
                    "args": [
                        {
                            "name": "fromDate",
                            "type": "Moment"
                        },
                        {
                            "name": "toDate",
                            "type": "Moment"
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 352,
                    "jsdoctags": [
                        {
                            "name": "fromDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changedFromCalendar",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateModelBasedOnType",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        },
                        {
                            "name": "toDate",
                            "type": "Moment",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 461,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "toDate",
                            "type": "Moment",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRangeFromModel",
                    "args": [
                        {
                            "name": "modelVal",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 436,
                    "jsdoctags": [
                        {
                            "name": "modelVal",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateState",
                    "args": [
                        {
                            "name": "updatedDate",
                            "type": "Moment",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 169,
                    "jsdoctags": [
                        {
                            "name": "updatedDate",
                            "type": "Moment",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl"
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 183,
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "val",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 201,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-date-picker",
                    "defaultValue": "true",
                    "line": 58
                }
            ],
            "hostListeners": [
                {
                    "name": "document:touchend",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 287
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 278
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DatePickerDisableDateFilter } from './date.filters';\r\nimport {\r\n  Component,\r\n  Input,\r\n  OnInit,\r\n  AfterViewInit,\r\n  HostListener,\r\n  ViewChild,\r\n  Output,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  LOCALE_ID,\r\n  HostBinding,\r\n  OnChanges,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport {\r\n  NG_VALUE_ACCESSOR,\r\n  ControlValueAccessor,\r\n  Validator,\r\n  AbstractControl,\r\n  ValidationErrors,\r\n  NG_VALIDATORS\r\n} from '@angular/forms';\r\nimport { DatePickerInputComponent } from './date-picker-input/date-picker-input.component';\r\nimport { DatePickerCalendarComponent } from './date-picker-calendar/date-picker-calendar.component';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\nconst moment = moment_;\r\nlet uniqueInputId = 0;\r\n\r\nexport type DateType = Date | Moment | number;\r\n\r\n@Component({\r\n  selector: 'sm-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => DatePickerComponent),\r\n      multi: true\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => DatePickerComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class DatePickerComponent\r\n  implements\r\n  OnInit,\r\n  AfterViewInit,\r\n  OnChanges,\r\n  ControlValueAccessor,\r\n  Validator {\r\n  @HostBinding('class.sm-date-picker') readonly defaultHostClass = true;\r\n\r\n  private _date: DateType;\r\n  private _fromDate: DateType;\r\n  private _toDate: DateType;\r\n\r\n  @Input()\r\n  get date(): DateType {\r\n    return this._date;\r\n  }\r\n  set date(value: DateType) {\r\n    this._date = value;\r\n    this.setInitialDateType();\r\n    this.convertDatesToMoments();\r\n  }\r\n\r\n  @Input()\r\n  get fromDate(): DateType {\r\n    return this._fromDate;\r\n  }\r\n  set fromDate(value: DateType) {\r\n    this._fromDate = value;\r\n    this.setInitialDateType();\r\n    this.convertDatesToMoments();\r\n  }\r\n\r\n  @Input()\r\n  get toDate(): DateType {\r\n    return this._toDate;\r\n  }\r\n  set toDate(value: DateType) {\r\n    this._toDate = value;\r\n    this.convertDatesToMoments();\r\n    this.checkValidRange();\r\n  }\r\n\r\n  @Input() utc = false;\r\n  @Input() open = false;\r\n  @Input() range = false;\r\n  @Input() dpID = `sm-dp-${uniqueInputId++}`;\r\n  @Input() ariaLabelPrevMonth = 'Previous';\r\n  @Input() ariaLabelNextMonth = 'Next';\r\n  @Input() calendarViewLabel = 'Calendar view';\r\n  @Input() min: number = moment()\r\n    .subtract(150, 'years')\r\n    .valueOf();\r\n  @Input() max: number = moment()\r\n    .add(100, 'years')\r\n    .valueOf();\r\n  @Input() inputLabel = '';\r\n  @Input() disabled = false;\r\n  @Input() inputPlaceholder = '';\r\n  @Input() inputFormat: string | string[] = 'll';\r\n  @Input() displayFormat = 'll';\r\n  @Input() strictMode = false;\r\n  @Input() resetOnError = false;\r\n\r\n  _error: boolean;\r\n  @Input()\r\n  get error(): boolean {\r\n    return this._error;\r\n  }\r\n  set error(val: boolean) {\r\n    this._error = val;\r\n    if (val && this.resetOnError) this.onChange(null);\r\n    this.errorChange.emit(this._error);\r\n  }\r\n\r\n  @Input() disableDateFilter: DatePickerDisableDateFilter;\r\n\r\n  @Output() errorChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() dateChange: EventEmitter<DateType> = new EventEmitter<DateType>();\r\n  @Output() fromDateChange: EventEmitter<DateType> = new EventEmitter<\r\n    DateType\r\n  >();\r\n  @Output() toDateChange: EventEmitter<DateType> = new EventEmitter<DateType>();\r\n\r\n  @ViewChild(DatePickerCalendarComponent, { static: false })\r\n  dpCalendar: DatePickerCalendarComponent;\r\n  @ViewChild(DatePickerInputComponent, { static: false })\r\n  dpInput: DatePickerInputComponent;\r\n\r\n  initialDate: DateType;\r\n  initialDateType: string;\r\n  dateWasSelected = false;\r\n\r\n  constructor(@Inject(LOCALE_ID) public locale: string) {\r\n    moment.locale(locale);\r\n  }\r\n\r\n  ngOnInit() {\r\n    if (this._date || (this._fromDate && this._toDate)) {\r\n      this.dateWasSelected = true;\r\n    }\r\n    this.initDates();\r\n    this.setInitialDateType();\r\n    this.convertDatesToMoments();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    if (this.range && this._fromDate) {\r\n      this.updateState(this._fromDate as Moment);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes) {\r\n      if (this.dpCalendar) this.dpCalendar.dateChanged(this._date as Moment);\r\n    }\r\n  }\r\n\r\n  updateState(updatedDate?: Moment) {\r\n    if (this.dpCalendar)\r\n      this.dpCalendar.dateChanged(\r\n        updatedDate ? updatedDate : (this._date as Moment)\r\n      );\r\n  }\r\n\r\n  initDates() {\r\n    if (this._date === undefined) {\r\n      this.initialDate = moment();\r\n    }\r\n  }\r\n\r\n  /* NG_VALIDATORS */\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    return this.error ? { invalidDate: this.error } : null;\r\n  }\r\n  /* NG_VALIDATORS */\r\n\r\n  /* NG_VALUE_ACCESSOR */\r\n  onChange = (val?: any) => { };\r\n\r\n  registerOnChange(fn: any) {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  registerOnTouched() { }\r\n\r\n  writeValue(val) {\r\n    if (!!val) {\r\n      const modalDate = new Date(val);\r\n      if (modalDate !== null && !isNaN(modalDate.getTime())) {\r\n        this._date = val;\r\n        this.dateWasSelected = true;\r\n        this.initialDateType = undefined;\r\n        this.setInitialDateType();\r\n        this._date = this.convertToMoment(modalDate);\r\n        if (this.dpCalendar)\r\n          this.dpCalendar.navComponent.updateMonthLabel(this._date);\r\n      } else {\r\n        if (val['fromDate']) {\r\n          this._fromDate = val['fromDate'];\r\n          this.initialDateType = undefined;\r\n          this.setInitialDateType();\r\n        }\r\n        this.updateRangeFromModel(val);\r\n        this.convertDatesToMoments();\r\n        this.checkValidRange();\r\n      }\r\n    } else {\r\n      this.resetDP();\r\n    }\r\n  }\r\n\r\n  /* Core */\r\n  dateSelected() {\r\n    this.error = false;\r\n    this.open = false;\r\n    document.body.classList.remove('sm-date-picker-open');\r\n    this.convertDatesToMoments();\r\n    this.emitEventBasedOnType(this.dateChange, <Moment>this._date);\r\n    if (!this.range) {\r\n      this.updateModelBasedOnType(<Moment>this._date);\r\n    }\r\n    if (this.dpCalendar)\r\n      this.dpCalendar.navComponent.updateMonthLabel(<Moment>this._date);\r\n    this.dpInput.updateValidState(<Moment>this._date);\r\n    this.dateWasSelected = true;\r\n  }\r\n\r\n  fromDateChanged($event: Moment, changedFromCalendar: boolean = false) {\r\n    this.fromDate = $event;\r\n    this.dpInput.updateValidState(<Moment>this._fromDate);\r\n    this.updateDPInput($event, <Moment>this._toDate, changedFromCalendar);\r\n\r\n    this.dpCalendar.dayViewComponent.fromDate = this.fromDate\r\n      ? moment(this.fromDate)\r\n      : undefined;\r\n    this.dpCalendar.dayViewComponent.selectingFromDate = false;\r\n    this.dpCalendar.dayViewComponent.updateMonths(\r\n      this.dpCalendar.dayViewComponent.internalDate\r\n    );\r\n    if (!!this._fromDate)\r\n      this.emitEventBasedOnType(this.fromDateChange, <Moment>this._fromDate);\r\n  }\r\n\r\n  toDateChanged($event: Moment, changedFromCalendar: boolean = false) {\r\n    this._toDate = $event;\r\n\r\n    this.emitEventBasedOnType(this.fromDateChange, <Moment>this._fromDate);\r\n    this.emitEventBasedOnType(this.toDateChange, this._toDate);\r\n    this.updateModelBasedOnType(<Moment>this._fromDate, this._toDate);\r\n    this.dpInput.updateValidState(<Moment>this._toDate);\r\n    this.updateDPInput(<Moment>this._fromDate, $event, changedFromCalendar);\r\n    this.dpCalendar.dayViewComponent.toDate = this.toDate\r\n      ? moment(this.toDate)\r\n      : undefined;\r\n    this.dpCalendar.dayViewComponent.selectingFromDate = true;\r\n    this.dpCalendar.dayViewComponent.updateMonths(\r\n      this.dpCalendar.dayViewComponent.internalDate\r\n    );\r\n  }\r\n\r\n  /* UX Listeners */\r\n  @HostListener('keydown', ['$event'])\r\n  handleKeyboardEvent(event: KeyboardEvent) {\r\n    if (!this.open) {\r\n      return;\r\n    }\r\n    this.onEscape(event);\r\n  }\r\n\r\n  @HostListener('document:touchend', ['$event'])\r\n  @HostListener('document:click', ['$event'])\r\n  handleClickEvent(event: Event) {\r\n    if (!this.open) {\r\n      return;\r\n    }\r\n    if (this.onBlur(event)) {\r\n      this.open = false;\r\n      this.resetDates();\r\n      document.body.classList.remove('sm-date-picker-open');\r\n    }\r\n  }\r\n\r\n  /* Helper Functions */\r\n  checkValidRange() {\r\n    this.convertDatesToMoments();\r\n    if (\r\n      !!this._fromDate &&\r\n      !!this._toDate &&\r\n      (<Moment>this._fromDate).isSame(this._toDate, 'day')\r\n    ) {\r\n      this._toDate = (<Moment>this._toDate).clone().add(1, 'day');\r\n      this.emitEventBasedOnType(this.fromDateChange, <Moment>this._fromDate);\r\n      this.emitEventBasedOnType(this.fromDateChange, this._toDate);\r\n    }\r\n  }\r\n\r\n  resetDates() {\r\n    if (this.range && !!this.dpCalendar) {\r\n      this.dpCalendar.dayViewComponent.fromDate = this.fromDate\r\n        ? moment(this.fromDate)\r\n        : undefined;\r\n      this.dpCalendar.dayViewComponent.toDate = this.toDate\r\n        ? moment(this.toDate)\r\n        : undefined;\r\n      this.dpCalendar.dayViewComponent.selectingFromDate = true;\r\n      this.dpCalendar.dayViewComponent.updateMonths(\r\n        this.dpCalendar.dayViewComponent.internalDate\r\n      );\r\n    }\r\n  }\r\n\r\n  resetDP(closeDp?: Boolean) {\r\n    this.resetDates();\r\n    this.error = false;\r\n    this.date = undefined;\r\n    if (this.dpCalendar) {\r\n      this.dpCalendar.dayViewComponent.resetDP();\r\n    }\r\n    this.dateChange.emit(this._date);\r\n    if (this.range) {\r\n      this.fromDateChange.emit(this._date);\r\n      this.toDateChange.emit(this._date);\r\n    }\r\n    this.dateWasSelected = false;\r\n    this.onChange(this._date);\r\n    if (closeDp) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  resetCalendarView() {\r\n    if (this.dpCalendar) {\r\n      this.dpCalendar.dayViewComponent.resetDP();\r\n    }\r\n  }\r\n\r\n  updateDPInput(\r\n    fromDate: Moment,\r\n    toDate: Moment,\r\n    changedFromCalendar: boolean\r\n  ) {\r\n    this.dpInput.fromDate = changedFromCalendar\r\n      ? fromDate\r\n      : this.dpInput.fromDate;\r\n    this.dpInput.toDate = changedFromCalendar ? toDate : this.dpInput.toDate;\r\n  }\r\n\r\n  calenderViewOpen() {\r\n    this.open = !this.open;\r\n    if (this.open) {\r\n      document.body.classList.add('sm-date-picker-open');\r\n    } else {\r\n      document.body.classList.remove('sm-date-picker-open');\r\n    }\r\n\r\n    this.convertDatesToMoments();\r\n  }\r\n\r\n  setInitialDateType() {\r\n    if (this.initialDateType === undefined) {\r\n      if (!this.range && this._date instanceof Date) {\r\n        this.initialDateType = 'date';\r\n      } else if (!this.range && typeof this._date === 'number') {\r\n        this.initialDateType = 'utc';\r\n      } else if (!this.range && moment.isMoment(this._date)) {\r\n        this.initialDateType = 'moment';\r\n      } else if (!!this._fromDate && typeof this._fromDate === 'number') {\r\n        this.initialDateType = 'utc';\r\n      } else if (!!this._fromDate && moment.isMoment(this._fromDate)) {\r\n        this.initialDateType = 'moment';\r\n      } else if (!!this._fromDate && this._fromDate instanceof Date) {\r\n        this.initialDateType = 'date';\r\n      }\r\n    }\r\n  }\r\n\r\n  onBlur(event) {\r\n    const clickContained =\r\n      (<HTMLElement>event.target).classList.contains(\r\n        'calendar-year-view-years'\r\n      ) ||\r\n      (<HTMLElement>event.target).classList.contains(\r\n        'calendar-day-view-days'\r\n      ) ||\r\n      this.dpCalendar.elRef.nativeElement.contains(event.target) ||\r\n      this.dpInput.elRef.nativeElement.contains(event.target);\r\n    return !clickContained;\r\n  }\r\n\r\n  onEscape(event: KeyboardEvent) {\r\n    if (event.key === 'Esc' || event.key === 'Escape') {\r\n      this.open = false;\r\n      this.resetDates();\r\n      document.body.classList.remove('sm-date-picker-open');\r\n    }\r\n  }\r\n\r\n  convertDatesToMoments() {\r\n    if (\r\n      (!!this._date && !moment.isMoment(this._date)) ||\r\n      typeof this._date === 'number'\r\n    ) {\r\n      this._date = this.convertToMoment(this._date);\r\n    }\r\n    if (!!this._fromDate && !moment.isMoment(this._fromDate)) {\r\n      this._fromDate = this.convertToMoment(this._fromDate);\r\n    }\r\n    if (!!this._toDate && !moment.isMoment(this._toDate)) {\r\n      this._toDate = this.convertToMoment(this._toDate);\r\n    }\r\n  }\r\n\r\n  convertToMoment(date: DateType) {\r\n    if (typeof date === 'number') {\r\n      return moment.utc(date);\r\n    } else {\r\n      return moment(date);\r\n    }\r\n  }\r\n\r\n  updateRangeFromModel(modelVal: any) {\r\n    if (modelVal['fromDate']) {\r\n      this._fromDate = this.convertToMoment(modelVal['fromDate']);\r\n      this.updateModelBasedOnType(this._fromDate, <Moment>this._toDate);\r\n    }\r\n    if (modelVal['toDate']) {\r\n      this._toDate = this.convertToMoment(modelVal['toDate']);\r\n      this._date = this._toDate;\r\n      this.updateModelBasedOnType(<Moment>this._fromDate, this._toDate);\r\n      this.dateSelected();\r\n    }\r\n  }\r\n\r\n  emitEventBasedOnType(eventEmitter: EventEmitter<DateType>, date: Moment) {\r\n    if (this.utc === true) {\r\n      eventEmitter.emit(date.valueOf());\r\n    } else if (this.initialDateType === 'moment') {\r\n      eventEmitter.emit(date);\r\n    } else if (this.initialDateType === 'utc') {\r\n      eventEmitter.emit(date.valueOf());\r\n    } else {\r\n      eventEmitter.emit(date.toDate());\r\n    }\r\n  }\r\n\r\n  updateModelBasedOnType(date: Moment, toDate?: Moment) {\r\n    if (!!toDate) {\r\n      if (this.utc === true || this.initialDateType === 'utc') {\r\n        this.onChange({\r\n          fromDate: date.valueOf(),\r\n          toDate: toDate.valueOf()\r\n        });\r\n      } else {\r\n        this.onChange({\r\n          fromDate: this.initialDateType === 'moment' ? date : date.toDate(),\r\n          toDate: this.initialDateType === 'moment' ? toDate : toDate.toDate()\r\n        });\r\n      }\r\n    } else if (this.utc === true || this.initialDateType === 'utc') {\r\n      this.onChange(date.valueOf());\r\n    } else if (this.initialDateType === 'moment') {\r\n      this.onChange(date);\r\n    } else {\r\n      this.onChange(date.toDate());\r\n    }\r\n  }\r\n\r\n  focus() {\r\n    this.dpInput.focus();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "locale",
                        "type": "string"
                    }
                ],
                "line": 142,
                "jsdoctags": [
                    {
                        "name": "locale",
                        "type": "string",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit",
                "OnChanges",
                "ControlValueAccessor",
                "Validator"
            ],
            "accessors": {
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "fromDate": {
                    "name": "fromDate",
                    "setSignature": {
                        "name": "fromDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 78,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "toDate": {
                    "name": "toDate",
                    "setSignature": {
                        "name": "toDate",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 88,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "error": {
                    "name": "error",
                    "setSignature": {
                        "name": "error",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 120,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<span [hidden]=\"!open\" class=\"sm-date-picker__overlay\"></span>\r\n\r\n<sm-date-picker-input\r\n  [calendarViewLabel]=\"calendarViewLabel\"\r\n  [inputID]=\"dpID\"\r\n  [disabled]=\"disabled\"\r\n  [range]=\"range\"\r\n  [(date)]=\"date\"\r\n  [dateWasSelected]=\"dateWasSelected\"\r\n  [inputPlaceholder]=\"inputPlaceholder\"\r\n  [inputFormat]=\"inputFormat\"\r\n  [displayFormat]=\"displayFormat\"\r\n  [strictMode]=\"strictMode\"\r\n  [fromDate]=\"fromDate\"\r\n  [toDate]=\"toDate\"\r\n  (openChange)=\"calenderViewOpen()\"\r\n  [min]=\"min\"\r\n  [max]=\"max\"\r\n  [(error)]=\"error\"\r\n  (clearDate)=\"resetDP()\"\r\n  [inputLabel]=\"inputLabel\"\r\n  [disableDateFilter]=\"disableDateFilter\"\r\n  (dateChange)=\"dateSelected()\"\r\n  (resetCalendar)=\"resetCalendarView()\"\r\n  (fromDateChange)=\"fromDateChanged($event)\"\r\n  (toDateChange)=\"toDateChanged($event)\"\r\n>\r\n</sm-date-picker-input>\r\n\r\n<sm-date-picker-calendar\r\n  [ariaLabelPrevMonth]=\"ariaLabelPrevMonth\"\r\n  [ariaLabelNextMonth]=\"ariaLabelNextMonth\"\r\n  [min]=\"min\"\r\n  [max]=\"max\"\r\n  [calendarID]=\"dpID\"\r\n  [range]=\"range\"\r\n  [(open)]=\"open\"\r\n  [(date)]=\"date\"\r\n  [fromDate]=\"fromDate\"\r\n  [toDate]=\"toDate\"\r\n  [disableDateFilter]=\"disableDateFilter\"\r\n  (fromDateChange)=\"fromDateChanged($event, true)\"\r\n  (toDateChange)=\"toDateChanged($event, true)\"\r\n  (dateSelect)=\"dateSelected()\"\r\n>\r\n</sm-date-picker-calendar>\r\n"
        },
        {
            "name": "DatePickerInputComponent",
            "id": "component-DatePickerInputComponent-fd97039518ac2c029ebea63d1fceb075",
            "file": "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-date-picker-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./date-picker-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "calendarViewLabel",
                    "line": 37,
                    "type": "string"
                },
                {
                    "name": "date",
                    "line": 29,
                    "type": "Moment"
                },
                {
                    "name": "dateWasSelected",
                    "defaultValue": "false",
                    "line": 44
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 43
                },
                {
                    "name": "disableDateFilter",
                    "line": 50,
                    "type": "DatePickerDisableDateFilter"
                },
                {
                    "name": "displayFormat",
                    "line": 47,
                    "type": "string"
                },
                {
                    "name": "error",
                    "line": 49,
                    "type": "boolean"
                },
                {
                    "name": "fromDate",
                    "defaultValue": "moment()",
                    "line": 38,
                    "type": "Moment"
                },
                {
                    "name": "inputFormat",
                    "line": 46,
                    "type": "string | string[]"
                },
                {
                    "name": "inputID",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "inputLabel",
                    "line": 24
                },
                {
                    "name": "inputPlaceholder",
                    "line": 45,
                    "type": "string"
                },
                {
                    "name": "max",
                    "line": 42,
                    "type": "number"
                },
                {
                    "name": "min",
                    "line": 41,
                    "type": "number"
                },
                {
                    "name": "range",
                    "line": 40,
                    "type": "boolean"
                },
                {
                    "name": "strictMode",
                    "defaultValue": "true",
                    "line": 48
                },
                {
                    "name": "toDate",
                    "defaultValue": "moment()",
                    "line": 39,
                    "type": "Moment"
                }
            ],
            "outputsClass": [
                {
                    "name": "clearDate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 53,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "dateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 55,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "errorChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 52,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "fromDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 56,
                    "type": "EventEmitter<Moment>"
                },
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 54,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "resetCalendar",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 58,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "toDateChange",
                    "defaultValue": "new EventEmitter<Moment>()",
                    "line": 57,
                    "type": "EventEmitter<Moment>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_date",
                    "type": "Moment",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "dpInputField",
                    "type": "ElementRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dpInputField', {static: false}"
                        }
                    ]
                },
                {
                    "name": "elRef",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "inputValue",
                    "defaultValue": "''",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "methodsClass": [
                {
                    "name": "focus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138
                },
                {
                    "name": "invalidBounds",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidNewDate",
                    "args": [
                        {
                            "name": "newDate",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 154,
                    "jsdoctags": [
                        {
                            "name": "newDate",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onBlur",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onClearDate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 164
                },
                {
                    "name": "onOpen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "updateInputField",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126
                },
                {
                    "name": "updateValidState",
                    "args": [
                        {
                            "name": "date",
                            "type": "Moment"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Moment",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-date-picker-input",
                    "defaultValue": "true",
                    "line": 22
                }
            ],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { DatePickerDisableDateFilter } from './../date.filters';\r\nimport { SMDatePipe } from '../sm-date.pipe';\r\nimport {\r\n  Component,\r\n  Input,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  HostBinding,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { Moment } from 'moment';\r\nimport * as moment_ from 'moment';\r\n\r\nconst moment = moment_;\r\n\r\n@Component({\r\n  selector: 'sm-date-picker-input',\r\n  templateUrl: './date-picker-input.component.html'\r\n})\r\nexport class DatePickerInputComponent  {\r\n  @HostBinding('class.sm-date-picker-input') readonly defaultHostClass = true;\r\n\r\n  @Input() inputLabel;\r\n  @Input() inputID: string;\r\n  private _date: Moment;\r\n\r\n  @Input()\r\n  get date(): Moment {\r\n    return this._date;\r\n  }\r\n  set date(value: Moment) {\r\n    this._date = !!value ? value : moment();\r\n    this.updateInputField();\r\n  }\r\n\r\n  @Input() calendarViewLabel: string;\r\n  @Input() fromDate: Moment = moment();\r\n  @Input() toDate: Moment = moment();\r\n  @Input() range: boolean;\r\n  @Input() min: number;\r\n  @Input() max: number;\r\n  @Input() disabled = false;\r\n  @Input() dateWasSelected = false;\r\n  @Input() inputPlaceholder: string;\r\n  @Input() inputFormat: string | string[];\r\n  @Input() displayFormat: string;\r\n  @Input() strictMode = true;\r\n  @Input() error: boolean;\r\n  @Input() disableDateFilter: DatePickerDisableDateFilter;\r\n\r\n  @Output() errorChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n  @Output() clearDate: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() openChange: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() dateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() fromDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() toDateChange: EventEmitter<Moment> = new EventEmitter<Moment>();\r\n  @Output() resetCalendar: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  @ViewChild('dpInputField', { static: false }) dpInputField: ElementRef<any>;\r\n  inputValue: any = '';\r\n\r\n  constructor(public elRef: ElementRef, private smDatePipe: SMDatePipe) {}\r\n\r\n  onOpen() {\r\n    this.openChange.emit();\r\n  }\r\n\r\n  updateValidState(date: Moment) {\r\n    this.error = !this.isValidNewDate(date);\r\n  }\r\n\r\n  onBlur($event: Event) {\r\n    const dateEntered: Moment = $event.target['value']\r\n      ? moment($event.target['value'], this.inputFormat, this.strictMode)\r\n      : null;\r\n    if ($event.target['value'] === '') {\r\n      this.clearDate.emit();\r\n      return;\r\n    }\r\n    if (!this.range && dateEntered !== null && dateEntered.isValid()) {\r\n      if (!this.date) {\r\n        this.date = moment(dateEntered);\r\n      } else {\r\n        this.date = moment(dateEntered).locale(this.date.locale());\r\n      }\r\n      this.updateValidState(this.date.clone());\r\n      if (this.date.year() > 9999) this.date.set('year', 9999);\r\n      this.dateChange.emit(this.date);\r\n      this.errorChange.emit(false);\r\n      this.updateInputField();\r\n    } else if ((<string>$event.target['value']).split(' - ').length > 1) {\r\n      const fromDate = new Date(\r\n        (<string>$event.target['value']).split(' - ')[0]\r\n      );\r\n      const toDate = new Date((<string>$event.target['value']).split(' - ')[1]);\r\n      if (!isNaN(fromDate.getTime()) && !isNaN(toDate.getTime())) {\r\n        if (!this.fromDate) {\r\n          this.fromDate = moment(fromDate);\r\n        } else {\r\n          this.fromDate = moment(fromDate).locale(this.fromDate.locale());\r\n        }\r\n        if (!this.toDate) {\r\n          this.toDate = moment(toDate);\r\n        } else {\r\n          this.toDate = moment(toDate).locale(this.toDate.locale());\r\n        }\r\n        if (this.fromDate.isValid() && this.toDate.isValid()) {\r\n          this.fromDateChange.emit(this.fromDate);\r\n          this.toDateChange.emit(this.toDate);\r\n          this.dateChange.emit(this.toDate);\r\n          this.errorChange.emit(false);\r\n          this.updateInputField();\r\n        } else {\r\n          this.errorChange.emit(true);\r\n        }\r\n      } else {\r\n        this.errorChange.emit(true);\r\n      }\r\n    } else {\r\n      this.errorChange.emit(true);\r\n      this.resetCalendar.emit();\r\n    }\r\n  }\r\n\r\n  updateInputField() {\r\n    setTimeout(() => {\r\n      if (this.dpInputField.nativeElement.value !== this.getValue()) {\r\n        this.dpInputField.nativeElement.value = this.getValue();\r\n      }\r\n    });\r\n  }\r\n\r\n  focus(): void {\r\n    this.dpInputField.nativeElement.focus();\r\n  }\r\n\r\n  getValue() {\r\n    this.inputValue = '';\r\n    if (this.dateWasSelected) {\r\n      this.inputValue = this.range\r\n        ? `${this.smDatePipe.transform(\r\n            this.fromDate,\r\n            this.displayFormat\r\n          )} - ${this.smDatePipe.transform(this.toDate, this.displayFormat)}`\r\n        : this.smDatePipe.transform(\r\n            moment(this.date, this.inputFormat),\r\n            this.displayFormat\r\n          );\r\n    }\r\n    return this.inputValue;\r\n  }\r\n\r\n  isValidNewDate(newDate: Moment): boolean {\r\n    if (this.invalidBounds(newDate)) return false;\r\n    if (this.disableDateFilter && this.disableDateFilter(newDate)) return false;\r\n    return true;\r\n  }\r\n\r\n  invalidBounds(newDate: Moment): boolean {\r\n    return !moment(newDate).isBetween(this.min, this.max, 'day', '[]');\r\n  }\r\n  \r\n  onClearDate() {\r\n    this.clearDate.emit();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "smDatePipe",
                        "type": "SMDatePipe"
                    }
                ],
                "line": 61,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "smDatePipe",
                        "type": "SMDatePipe",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "date": {
                    "name": "date",
                    "setSignature": {
                        "name": "date",
                        "type": "void",
                        "args": [
                            {
                                "name": "value",
                                "type": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "value",
                                "type": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<label [for]=\"inputID\" *ngIf=\"inputLabel\" class=\"sm-form-label\">{{\r\n  inputLabel\r\n}}</label>\r\n<input class=\"sm-input\" #dpInputField [disabled]=\"disabled ? disabled : null\" [id]=\"inputID\"\r\n  [placeholder]=\"inputPlaceholder\" [value]=\"getValue()\" (blur)=\"onBlur($event)\" (keydown.enter)=\"onBlur($event)\"\r\n  autocomplete=\"off\" />\r\n<button class=\"sm-input-clear\" (click)=\"onClearDate()\"></button>\r\n<button type=\"button\" [disabled]=\"disabled ? disabled : null\" [id]=\"inputID + '-btn'\" class=\"sm-dp-input-btn\"\r\n  [ngClass]=\"{ 'sm-dp-input-btn--error': error }\" (click)=\"onOpen()\" [attr.aria-label]=\"calendarViewLabel\">\r\n</button>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-8f196770333aa216860a88c0b6b221aa",
            "file": "stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 64,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SMButtonComponent",
            "id": "component-SMButtonComponent-1c0aa0b24134a49502f3c519295d49b4",
            "file": "projects/components/src/lib/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field_id",
                    "defaultValue": "`sm-button-${uniqueId++}`",
                    "line": 10
                },
                {
                    "name": "type",
                    "line": 11,
                    "type": "\"secondary\" | \"tertiary\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Renderer2, ElementRef, AfterViewInit, OnDestroy, Output, EventEmitter } from '@angular/core';\r\n\r\nlet uniqueId = 0;\r\n@Component({\r\n  selector: 'sm-button',\r\n  templateUrl: './button.component.html'\r\n})\r\nexport class SMButtonComponent implements OnInit {\r\n\r\n  @Input() field_id = `sm-button-${uniqueId++}`;\r\n  @Input() type: 'secondary' | 'tertiary';\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n\r\n  constructor(private renderer: Renderer2, private host: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n    const buttonElement = (this.host.nativeElement as HTMLElement).querySelector('button');\r\n    this.renderer.addClass(buttonElement, `sm-button--${this.type}`);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "host",
                        "type": "ElementRef"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button tabindex=\"0\" [id]=\"field_id\" class=\"sm-button\" (click)=\"onClick.emit($event);\"><ng-content></ng-content></button>"
        },
        {
            "name": "SMCardsBodyComponent",
            "id": "component-SMCardsBodyComponent-117efc59fef29c89687ae3f8daa489ef",
            "file": "projects/components/src/lib/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-body",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-card',\r\n  templateUrl: './card.component.html',\r\n  host: { '[class.sm-card]': 'true'},\r\n})\r\nexport class SMCardsComponent implements OnInit {\r\n\r\n  @Input('imgSrc') imgSrc: string;\r\n  @Input('placement') placement: string;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--header]': 'true' },\r\n})\r\nexport class SMCardsHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--body]': 'true' },\r\n})\r\nexport class SMCardsBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'card-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--footer]': 'true' },\r\n})\r\nexport class SMCardsFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMCardsComponent",
            "id": "component-SMCardsComponent-117efc59fef29c89687ae3f8daa489ef",
            "file": "projects/components/src/lib/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-card",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imgSrc",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "placement",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-card',\r\n  templateUrl: './card.component.html',\r\n  host: { '[class.sm-card]': 'true'},\r\n})\r\nexport class SMCardsComponent implements OnInit {\r\n\r\n  @Input('imgSrc') imgSrc: string;\r\n  @Input('placement') placement: string;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--header]': 'true' },\r\n})\r\nexport class SMCardsHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--body]': 'true' },\r\n})\r\nexport class SMCardsBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'card-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--footer]': 'true' },\r\n})\r\nexport class SMCardsFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sm-card--wrapper\" [attr.imgSrc]=\"imgSrc ? true : false\" [attr.placement]=\"placement\">\r\n  <div *ngIf=\"imgSrc\" class=\"sm-card--img\" [attr.placement]=\"placement\">\r\n    <img class=\"\" [src]=\"imgSrc\" />\r\n  </div>\r\n  <ng-content select=\"card-header\"></ng-content>\r\n  <ng-content select=\"card-body\"></ng-content>\r\n  <ng-content select=\"card-footer\"></ng-content>\r\n</div>"
        },
        {
            "name": "SMCardsFooterComponent",
            "id": "component-SMCardsFooterComponent-117efc59fef29c89687ae3f8daa489ef",
            "file": "projects/components/src/lib/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-card',\r\n  templateUrl: './card.component.html',\r\n  host: { '[class.sm-card]': 'true'},\r\n})\r\nexport class SMCardsComponent implements OnInit {\r\n\r\n  @Input('imgSrc') imgSrc: string;\r\n  @Input('placement') placement: string;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--header]': 'true' },\r\n})\r\nexport class SMCardsHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--body]': 'true' },\r\n})\r\nexport class SMCardsBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'card-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--footer]': 'true' },\r\n})\r\nexport class SMCardsFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 54
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMCardsHeaderComponent",
            "id": "component-SMCardsHeaderComponent-117efc59fef29c89687ae3f8daa489ef",
            "file": "projects/components/src/lib/components/card/card.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "card-header",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, HostBinding } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-card',\r\n  templateUrl: './card.component.html',\r\n  host: { '[class.sm-card]': 'true'},\r\n})\r\nexport class SMCardsComponent implements OnInit {\r\n\r\n  @Input('imgSrc') imgSrc: string;\r\n  @Input('placement') placement: string;\r\n  \r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--header]': 'true' },\r\n})\r\nexport class SMCardsHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'card-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--body]': 'true' },\r\n})\r\nexport class SMCardsBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n@Component({\r\n  selector: 'card-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-card--footer]': 'true' },\r\n})\r\nexport class SMCardsFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMCheckboxComponentWrapper",
            "id": "component-SMCheckboxComponentWrapper-f9ca31c83a0e140985d82f8d1559cc7f",
            "file": "projects/components/src/lib/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field_id",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, HostBinding, Input, Directive, ViewEncapsulation, Output, EventEmitter, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  host: { '[class.sm-checkbox-wrapper]': 'true' },\r\n})\r\nexport class SMCheckboxComponentWrapper implements OnInit {\r\n\r\n  @Input() field_id: string;\r\n  @Input() label: string;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Directive({\r\n  selector: '[sm-checkbox]',\r\n})\r\nexport class SMCheckboxComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-checkbox--field') @Input() default = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\r\n<label class=\"sm-checkbox--label\" [for]=\"field_id\">{{label}}</label>"
        },
        {
            "name": "SMDrawerComponent",
            "id": "component-SMDrawerComponent-e7d542d4db6812cf4af68ade864113a6",
            "file": "projects/components/src/lib/components/drawer/drawer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-drawer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./drawer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "drawerID",
                    "defaultValue": "`sm-drawer-${uniqueID++}`",
                    "line": 15
                },
                {
                    "name": "noOverlay",
                    "defaultValue": "false",
                    "line": 17,
                    "type": "boolean"
                },
                {
                    "name": "open",
                    "line": 21
                },
                {
                    "name": "position",
                    "line": 16,
                    "type": "DrawerPosition"
                }
            ],
            "outputsClass": [
                {
                    "name": "openChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 39,
                    "type": "EventEmitter<boolean>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_open",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "triggerElement",
                    "type": "Element",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "closeDrawer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "line": 60
                },
                {
                    "name": "document:touchend",
                    "args": [
                        {
                            "name": "targetElement",
                            "type": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event.target"
                    ],
                    "line": 53
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, EventEmitter, Output, HostListener } from '@angular/core';\r\n\r\nexport type DrawerPosition = 'left' | 'right' | 'top' | 'bottom' | false;\r\n\r\nlet uniqueID = 0;\r\n\r\n@Component({\r\n  selector: 'sm-drawer',\r\n  templateUrl: './drawer.component.html'\r\n})\r\nexport class SMDrawerComponent implements OnInit {\r\n\r\n  triggerElement: Element;\r\n\r\n  @Input() drawerID = `sm-drawer-${uniqueID++}`;\r\n  @Input() position: DrawerPosition;\r\n  @Input() noOverlay: boolean = false;\r\n\r\n  _open: boolean;\r\n  @Input()\r\n  get open() {\r\n    return this._open;\r\n  }\r\n  set open(val: boolean) {\r\n    if (val) {\r\n      this.triggerElement = document.activeElement;\r\n      setTimeout(() => {\r\n        console.warn(document.getElementById(this.drawerID));\r\n        document.getElementById(this.drawerID).focus();\r\n        console.warn(document.activeElement);\r\n      });\r\n    } else if (this.triggerElement) {\r\n      (this.triggerElement as HTMLElement).focus();\r\n    }\r\n\r\n    this._open = val;\r\n  }\r\n\r\n  @Output() openChange: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  closeDrawer() {\r\n    this.open = false;\r\n    this.openChange.emit(this.open);\r\n  }\r\n\r\n  @HostListener('document:touchend', ['$event.target'])\r\n  @HostListener('document:click', ['$event.target'])\r\n  handleClickEvent(targetElement) {\r\n    if (!this.noOverlay && !document.getElementById(this.drawerID).contains(targetElement)) {\r\n      this.closeDrawer();\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keydown.escape')\r\n  onEscape() {\r\n    this.closeDrawer();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 39
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "open": {
                    "name": "open",
                    "setSignature": {
                        "name": "open",
                        "type": "void",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            },
            "templateData": "<div *ngIf=\"noOverlay !== true\" class=\"sm-drawer-overlay\" [attr.open]=\"open ? '' : null\" ></div>\r\n<div [id]=\"drawerID\" class=\"sm-drawer\" [attr.open]=\"open ? '' : null\" [attr.position]=\"position\" tabindex=\"-1\" aria-role=\"drawer\" [attr.aria-label]=\"position + ' drawer open'\">\r\n  <ng-content></ng-content>\r\n  <button [attr.aria-label]=\"'Close ' + position + ' drawer'\" (click)=\"closeDrawer()\" class=\"sm-drawer--close\"></button>\r\n</div>"
        },
        {
            "name": "SMInputComponent",
            "id": "component-SMInputComponent-24fb70e84a5b07b553ceca6b49290a3e",
            "file": "projects/components/src/lib/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SMInputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "sm-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field_id",
                    "defaultValue": "`sm-${uniqueId++}`",
                    "line": 21
                },
                {
                    "name": "focus",
                    "line": 24,
                    "type": "boolean"
                },
                {
                    "name": "input",
                    "defaultValue": "''",
                    "line": 23
                },
                {
                    "name": "label",
                    "defaultValue": "`Enter Label`",
                    "line": 22
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "line": 25
                }
            ],
            "outputsClass": [
                {
                    "name": "focusChanged",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 28,
                    "type": "EventEmitter<boolean>"
                },
                {
                    "name": "inputChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 27,
                    "type": "EventEmitter<string>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onBlured",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42
                },
                {
                    "name": "onFocused",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ElementRef, forwardRef, Input, Output, EventEmitter } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nlet uniqueId = 0;\r\n\r\n@Component({\r\n  selector: 'sm-input',\r\n  templateUrl: './input.component.html',\r\n  host: { class: 'sm-input--wrapper' },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SMInputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n\r\n})\r\nexport class SMInputComponent implements OnInit, ControlValueAccessor {\r\n\r\n  @Input() field_id = `sm-${uniqueId++}`;\r\n  @Input() label = `Enter Label`;\r\n  @Input() input = '';\r\n  @Input() focus: boolean;\r\n  @Input() type = 'text';\r\n\r\n  @Output() inputChange: EventEmitter<string> = new EventEmitter<string>();\r\n  @Output() focusChanged: EventEmitter<boolean> = new EventEmitter<boolean>();\r\n\r\n  constructor(private host: ElementRef) { }\r\n\r\n  ngOnInit(): void {\r\n    this.focus = false;\r\n  }\r\n\r\n  onFocused() {\r\n    this.focus = true;\r\n    this.focusChanged.emit(this.focus);\r\n    (this.host.nativeElement as HTMLElement).setAttribute('focus', '');\r\n  }\r\n\r\n  onBlured() {\r\n    this.focus = false;\r\n    this.focusChanged.emit(this.focus);\r\n    (this.host.nativeElement as HTMLElement).removeAttribute('focus');\r\n  }\r\n\r\n  onInput($event: Event) {\r\n    this.input = $event.target['value'];\r\n    this.inputChange.emit(this.input);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n\r\n  }\r\n\r\n  registerOnChange(fn: any): void { }\r\n  registerOnTouched(fn: any): void { }\r\n  setDisabledState(isDisabled: boolean): void { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "host",
                        "type": "ElementRef"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "host",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "ControlValueAccessor"
            ],
            "templateData": "<input [id]=\"field_id\" [type]=\"type\" class=\"sm-input\" (input)=\"onInput($event)\" (focus)=\"onFocused()\" (blur)=\"onBlured()\" [(ngModel)]=\"input\" />\r\n<label [for]=\"field_id\" class=\"sm-input--label\" [ngClass]=\"{'sm-input--focus': input}\">{{label}}</label>"
        },
        {
            "name": "SMModalBodyComponent",
            "id": "component-SMModalBodyComponent-62be9173fe3542531dda7287bf148c7a",
            "file": "projects/components/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-modal-body",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, HostBinding, Renderer2, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-modal',\r\n  templateUrl: './modal.component.html',\r\n  host: { '[class.sm-modal-wrapper]': 'true' },\r\n})\r\nexport class SMModalComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-modal-wrapper-open') opened = false;\r\n  @Input() imgURL: string;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  open() {\r\n    setTimeout(() => {\r\n      this.opened = true;\r\n      this.renderer.addClass(document.querySelector('body'), 'modal-open');\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.opened = false;\r\n    this.renderer.removeClass(document.querySelector('body'), 'modal-open');\r\n  }\r\n\r\n  @HostListener('document:keydown.escape') \r\n  onKeydownHandler() {\r\n    this.close();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-modal-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-header]': 'true' },\r\n})\r\nexport class SMModalHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-body]': 'true' },\r\n})\r\nexport class SMModalBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-footer]': 'true' },\r\n})\r\nexport class SMModalFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 54
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMModalComponent",
            "id": "component-SMModalComponent-62be9173fe3542531dda7287bf148c7a",
            "file": "projects/components/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./modal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "imgURL",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                },
                {
                    "name": "open",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                }
            ],
            "hostBindings": [
                {
                    "name": "class.sm-modal-wrapper-open",
                    "defaultValue": "false",
                    "line": 10
                }
            ],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "line": 31
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, HostBinding, Renderer2, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-modal',\r\n  templateUrl: './modal.component.html',\r\n  host: { '[class.sm-modal-wrapper]': 'true' },\r\n})\r\nexport class SMModalComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-modal-wrapper-open') opened = false;\r\n  @Input() imgURL: string;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  open() {\r\n    setTimeout(() => {\r\n      this.opened = true;\r\n      this.renderer.addClass(document.querySelector('body'), 'modal-open');\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.opened = false;\r\n    this.renderer.removeClass(document.querySelector('body'), 'modal-open');\r\n  }\r\n\r\n  @HostListener('document:keydown.escape') \r\n  onKeydownHandler() {\r\n    this.close();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-modal-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-header]': 'true' },\r\n})\r\nexport class SMModalHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-body]': 'true' },\r\n})\r\nexport class SMModalBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-footer]': 'true' },\r\n})\r\nexport class SMModalFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<span class=\"overlay\" (click)=\"close();\"></span>\r\n<div class=\"sm-modal-container\">\r\n  <span class=\"sm-modal-container\"></span>\r\n  <ng-content select=\"sm-modal-header\"></ng-content>\r\n  <ng-content select=\"sm-modal-body\"></ng-content>\r\n  <ng-content select=\"sm-modal-footer\"></ng-content>\r\n  <span tabindex=\"0\" role=\"button\" aria-label=\"close modal window\" (click)=\"close();\" (keyup.enter)=\"close();\"\r\n    (keyup.space)=\"close();\" class=\"sm-modal-close\"></span>\r\n</div>"
        },
        {
            "name": "SMModalFooterComponent",
            "id": "component-SMModalFooterComponent-62be9173fe3542531dda7287bf148c7a",
            "file": "projects/components/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-modal-footer",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, HostBinding, Renderer2, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-modal',\r\n  templateUrl: './modal.component.html',\r\n  host: { '[class.sm-modal-wrapper]': 'true' },\r\n})\r\nexport class SMModalComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-modal-wrapper-open') opened = false;\r\n  @Input() imgURL: string;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  open() {\r\n    setTimeout(() => {\r\n      this.opened = true;\r\n      this.renderer.addClass(document.querySelector('body'), 'modal-open');\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.opened = false;\r\n    this.renderer.removeClass(document.querySelector('body'), 'modal-open');\r\n  }\r\n\r\n  @HostListener('document:keydown.escape') \r\n  onKeydownHandler() {\r\n    this.close();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-modal-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-header]': 'true' },\r\n})\r\nexport class SMModalHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-body]': 'true' },\r\n})\r\nexport class SMModalBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-footer]': 'true' },\r\n})\r\nexport class SMModalFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 67
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMModalHeaderComponent",
            "id": "component-SMModalHeaderComponent-62be9173fe3542531dda7287bf148c7a",
            "file": "projects/components/src/lib/components/modal/modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-modal-header",
            "styleUrls": [],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, HostBinding, Renderer2, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-modal',\r\n  templateUrl: './modal.component.html',\r\n  host: { '[class.sm-modal-wrapper]': 'true' },\r\n})\r\nexport class SMModalComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-modal-wrapper-open') opened = false;\r\n  @Input() imgURL: string;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  open() {\r\n    setTimeout(() => {\r\n      this.opened = true;\r\n      this.renderer.addClass(document.querySelector('body'), 'modal-open');\r\n    });\r\n  }\r\n\r\n  close() {\r\n    this.opened = false;\r\n    this.renderer.removeClass(document.querySelector('body'), 'modal-open');\r\n  }\r\n\r\n  @HostListener('document:keydown.escape') \r\n  onKeydownHandler() {\r\n    this.close();\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-modal-header',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-header]': 'true' },\r\n})\r\nexport class SMModalHeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-body',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-body]': 'true' },\r\n})\r\nexport class SMModalBodyComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n@Component({\r\n  selector: 'sm-modal-footer',\r\n  template: '<ng-content></ng-content>',\r\n  host: { '[class.sm-modal-footer]': 'true' },\r\n})\r\nexport class SMModalFooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 41
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "SMRadioButton",
            "id": "component-SMRadioButton-b4396f2cb39266a95be31f60ce0b4978",
            "file": "projects/components/src/lib/components/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-radio-btn",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 15
                },
                {
                    "name": "field_id",
                    "line": 13,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "groupLabel",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [],
                    "argsDecorator": [],
                    "line": 26
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, HostBinding, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-radio-btn',\r\n  templateUrl: './radio.component.html',\r\n  host: {\r\n    '[class.sm-radio-btn]': 'true'\r\n  },\r\n})\r\nexport class SMRadioButton implements OnInit {\r\n\r\n  @Input() label: string;\r\n  @Input() field_id: string;\r\n\r\n  @HostBinding('class.sm-radio-btn-disabled') @Input() disabled = false;\r\n\r\n  checked: boolean;\r\n  groupLabel: string;\r\n\r\n  constructor(private parent: SMRadioGroupComponent) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  @HostListener('click')\r\n  click() {\r\n    if (!this.disabled) {\r\n      this.parent.check(this.field_id);\r\n      this.checked = true;\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-radio-group',\r\n  template: `\r\n    <span class=\"sm-group-label\">{{groupLabel}}</span>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    '[class.sm-radio-group]': 'true'\r\n  },\r\n})\r\nexport class SMRadioGroupComponent implements AfterContentInit {\r\n\r\n  @Input() groupLabel;\r\n  @ContentChildren(SMRadioButton) comps: QueryList<SMRadioButton>;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterContentInit() {\r\n    this.comps.forEach(\r\n      (comp: SMRadioButton) => {\r\n        comp.groupLabel = this.groupLabel;\r\n      });\r\n  }\r\n\r\n  check(id: string) {\r\n    this.comps.forEach(\r\n      (comp: SMRadioButton) => {\r\n        comp.checked = false;\r\n        if (comp.field_id === id) {\r\n          comp.checked = true;\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "parent",
                        "type": "SMRadioGroupComponent"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "parent",
                        "type": "SMRadioGroupComponent",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label class=\"sm-radio-container\">\r\n  <span class=\"radio-btn\" [attr.checked]=\"checked\"></span>\r\n  <ng-content></ng-content> \r\n  <span class=\"sm-radio-label\"><span class=\"sr-only\">{{groupLabel}}</span>{{label}}</span>\r\n</label>"
        },
        {
            "name": "SMRadioGroupComponent",
            "id": "component-SMRadioGroupComponent-b4396f2cb39266a95be31f60ce0b4978",
            "file": "projects/components/src/lib/components/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-radio-group",
            "styleUrls": [],
            "styles": [],
            "template": "<span class=\"sm-group-label\">{{groupLabel}}</span>\n<ng-content></ng-content>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "groupLabel",
                    "line": 46
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "comps",
                    "type": "QueryList<SMRadioButton>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SMRadioButton"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "check",
                    "args": [
                        {
                            "name": "id",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewEncapsulation, ContentChildren, QueryList, AfterContentInit, HostBinding, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-radio-btn',\r\n  templateUrl: './radio.component.html',\r\n  host: {\r\n    '[class.sm-radio-btn]': 'true'\r\n  },\r\n})\r\nexport class SMRadioButton implements OnInit {\r\n\r\n  @Input() label: string;\r\n  @Input() field_id: string;\r\n\r\n  @HostBinding('class.sm-radio-btn-disabled') @Input() disabled = false;\r\n\r\n  checked: boolean;\r\n  groupLabel: string;\r\n\r\n  constructor(private parent: SMRadioGroupComponent) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  @HostListener('click')\r\n  click() {\r\n    if (!this.disabled) {\r\n      this.parent.check(this.field_id);\r\n      this.checked = true;\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'sm-radio-group',\r\n  template: `\r\n    <span class=\"sm-group-label\">{{groupLabel}}</span>\r\n    <ng-content></ng-content>\r\n  `,\r\n  host: {\r\n    '[class.sm-radio-group]': 'true'\r\n  },\r\n})\r\nexport class SMRadioGroupComponent implements AfterContentInit {\r\n\r\n  @Input() groupLabel;\r\n  @ContentChildren(SMRadioButton) comps: QueryList<SMRadioButton>;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterContentInit() {\r\n    this.comps.forEach(\r\n      (comp: SMRadioButton) => {\r\n        comp.groupLabel = this.groupLabel;\r\n      });\r\n  }\r\n\r\n  check(id: string) {\r\n    this.comps.forEach(\r\n      (comp: SMRadioButton) => {\r\n        comp.checked = false;\r\n        if (comp.field_id === id) {\r\n          comp.checked = true;\r\n        }\r\n      });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 47
            },
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "SMSideNavComponent",
            "id": "component-SMSideNavComponent-d18008b611551457f4b1fae7fe5304c5",
            "file": "projects/components/src/lib/components/side-nav/side-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-side-nav",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./side-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "line": 10,
                    "type": "string[]"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "open",
                    "defaultValue": "true",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "navigate",
                    "args": [
                        {
                            "name": "path",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "jsdoctags": [
                        {
                            "name": "path",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'sm-side-nav',\r\n  templateUrl: './side-nav.component.html'\r\n})\r\nexport class SMSideNavComponent implements OnInit {\r\n\r\n  @Input() links: string[] = [];\r\n  open = true;\r\n\r\n  constructor(private router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    if (window.innerWidth < 578) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n  navigate(path: string) {\r\n    this.router.navigate([path]);\r\n    if (window.innerWidth < 578) {\r\n      this.open = false;\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<sm-drawer [(open)]=\"open\" position=\"left\" [noOverlay]=\"true\">\r\n  <ul class=\"sm-side-nav\">\r\n    <li *ngFor=\"let link of links\" class=\"sm-side-nav--li\" (click)=\"navigate(link)\">\r\n      <a class=\"sm-side-nav--link\" routerLinkActive=\"active\">{{link | titlecase}}</a>\r\n    </li>\r\n  </ul>\r\n</sm-drawer>\r\n<button (click)=\"open = !open\" class=\"sm-side-nav--btn\"></button>\r\n"
        },
        {
            "name": "SMTabComponent",
            "id": "component-SMTabComponent-98552d9ed8fdf1228863438316543513",
            "file": "projects/components/src/lib/components/tabs/tab/tab.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-tab",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "clickEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tabButton",
                    "type": "ElementRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tabButton'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "isFocused",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "resetTab",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "setActive",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tabClicked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, Output, EventEmitter, ViewChild, ElementRef } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-tab',\r\n  templateUrl: './tab.component.html'\r\n})\r\nexport class SMTabComponent implements OnInit {\r\n\r\n  active: boolean;\r\n  @ViewChild('tabButton') tabButton: ElementRef<any>;\r\n  @Output('clickEvent') clickEvent = new EventEmitter<void>();\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  tabClicked() {\r\n    this.active = true;\r\n    this.clickEvent.emit();\r\n  }\r\n\r\n  setActive(val: boolean) {\r\n    this.active = val;\r\n    if (val)\r\n      this.tabButton.nativeElement.focus();\r\n  }\r\n\r\n  resetTab() {\r\n    this.active = false;\r\n    this.tabButton.nativeElement.blur();\r\n  }\r\n\r\n  isFocused(): boolean {\r\n    return this.tabButton.nativeElement === document.activeElement;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button #tabButton class=\"sm-tab--button\" [ngClass]=\"{'active': active}\" (click)=\"tabClicked()\">\r\n  <ng-content></ng-content>\r\n</button>"
        },
        {
            "name": "SMTabContentComponent",
            "id": "component-SMTabContentComponent-43d56d4620d124538fd8366c7891679d",
            "file": "projects/components/src/lib/components/tabs/tab-content/tab-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-tab-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tab-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "active",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                },
                {
                    "name": "setActive",
                    "args": [
                        {
                            "name": "val",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-tab-content',\r\n  templateUrl: './tab-content.component.html'\r\n})\r\nexport class SMTabContentComponent implements OnInit {\r\n\r\n  active: boolean;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  setActive(val: boolean) {\r\n    this.active = val;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"sm-tab-content\" [ngClass]=\"{'active': active}\">\r\n  <ng-content></ng-content>\r\n</div>"
        },
        {
            "name": "SMTabsComponent",
            "id": "component-SMTabsComponent-7d82761c0b8a3dc6c0b9b1a17ac9716c",
            "file": "projects/components/src/lib/components/tabs/tabs.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-tabs",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tabs.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "initialTab",
                    "defaultValue": "0",
                    "line": 11,
                    "type": "number"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentActiveTab",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "tabContents",
                    "type": "QueryList<SMTabContentComponent>",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SMTabContentComponent"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "type": "QueryList<SMTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "SMTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                },
                {
                    "name": "tabClicked",
                    "args": [
                        {
                            "name": "tabIndex",
                            "type": "number"
                        },
                        {
                            "name": "triggerClick",
                            "type": "boolean",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "tabIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "triggerClick",
                            "type": "boolean",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "line": 53
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, ContentChildren, QueryList, Input, HostListener } from '@angular/core';\r\nimport { SMTabComponent } from './tab/tab.component';\r\nimport { SMTabContentComponent } from './tab-content/tab-content.component';\r\n\r\n@Component({\r\n  selector: 'sm-tabs',\r\n  templateUrl: './tabs.component.html'\r\n})\r\nexport class SMTabsComponent implements AfterViewInit {\r\n\r\n  @Input() initialTab: number = 0;\r\n\r\n  currentActiveTab = 0;\r\n\r\n  @ContentChildren(SMTabComponent) tabs: QueryList<SMTabComponent>;\r\n  @ContentChildren(SMTabContentComponent) tabContents: QueryList<SMTabContentComponent>;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.currentActiveTab = this.initialTab;\r\n    this.tabs.forEach((tab: SMTabComponent, tabIndex: number) => {\r\n      if (this.initialTab === tabIndex) {\r\n        setTimeout(() => {\r\n          tab.tabClicked();\r\n        })\r\n      }\r\n\r\n      tab.clickEvent.subscribe(() => {\r\n        this.tabClicked(tabIndex);\r\n      })\r\n    });\r\n  }\r\n\r\n  tabClicked(tabIndex: number, triggerClick?: boolean) {\r\n    this.currentActiveTab = tabIndex;\r\n    this.tabs.forEach((tab: SMTabComponent, tIndex: number) => {\r\n      if (tabIndex !== tIndex) {\r\n        tab.resetTab();\r\n      }\r\n      else if (triggerClick) {\r\n        tab.setActive(true);\r\n      }\r\n    });\r\n    this.tabContents.forEach((tabContent: SMTabContentComponent, tIndex: number) => {\r\n      tabContent.setActive(tIndex === tabIndex);\r\n    });\r\n  }\r\n\r\n\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  onKeyDown(event: KeyboardEvent) {\r\n    let componentFocused = false;\r\n    this.tabs.forEach((tab: SMTabComponent) => {\r\n      componentFocused = componentFocused || tab.isFocused();\r\n    });\r\n    if (componentFocused) {\r\n      switch (event.key) {\r\n        case 'ArrowRight':\r\n          this.tabClicked((this.currentActiveTab + 1) % this.tabs.length, true);\r\n          break;\r\n        case 'ArrowLeft':\r\n          this.tabClicked(this.currentActiveTab > 0 ? (this.currentActiveTab - 1) % this.tabs.length : this.tabs.length - 1, true);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"sm-tabs-component\">\r\n  <div class=\"sm-tab-wrapper\">\r\n    <ng-content select=\"sm-tab\"></ng-content>\r\n  </div>\r\n  <div class=\"sm-tab-content-wrapper\">\r\n    <ng-content select=\"sm-tab-content\"></ng-content>\r\n  </div>\r\n</div>"
        },
        {
            "name": "SMToggleComponentWrapper",
            "id": "component-SMToggleComponentWrapper-e7437297076ccaa5ca781222e9def3d0",
            "file": "projects/components/src/lib/components/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field_id",
                    "line": 10,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 11,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Directive, HostBinding, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'sm-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  host: { '[class.sm-toggle-wrapper]': 'true' },\r\n})\r\nexport class SMToggleComponentWrapper implements OnInit {\r\n\r\n  @Input() field_id: string;\r\n  @Input() label: string;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n\r\n@Directive({\r\n  selector: '[sm-toggle]',\r\n})\r\nexport class SMToggleComponent implements OnInit {\r\n\r\n  @HostBinding('class.sm-toggle--field') @Input() default = true;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<ng-content></ng-content>\r\n<label class=\"sm-toggle--label\" [for]=\"field_id\">\r\n  <span class=\"sm-toggle--label__icon\"></span>\r\n  {{label}}\r\n</label>"
        },
        {
            "name": "SMTooltipComponent",
            "id": "component-SMTooltipComponent-e44859910b4ee310e2b938609f499179",
            "file": "projects/components/src/lib/components/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "sm-tooltip",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tooltipAriaLabel",
                    "defaultValue": "this.tooltipLabel + '. Open tooltip'",
                    "line": 14,
                    "type": "string"
                },
                {
                    "name": "tooltipId",
                    "defaultValue": "'sm-tooltip-' + (++uniqueId)",
                    "line": 12,
                    "type": "string"
                },
                {
                    "name": "tooltipLabel",
                    "defaultValue": "'Label ' + uniqueId",
                    "line": 13,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "contentOpen",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tooltipContainer",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tooltipContainer', {static: true}"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "closeTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "toggleTooltip",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "updateContainerPos",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33
                }
            ],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "line": 55
                },
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [],
                    "line": 29
                }
            ],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, Input, ViewChild, ElementRef, HostListener, Renderer2, Injectable, Inject } from '@angular/core';\r\n\r\nlet uniqueId = 0;\r\n@Component({\r\n  selector: 'sm-tooltip',\r\n  templateUrl: './tooltip.component.html',\r\n  host: {\r\n    class: 'sm-tooltip'\r\n  }\r\n})\r\nexport class SMTooltipComponent implements OnInit {\r\n  @Input('tooltipId') tooltipId: string = 'sm-tooltip-' + (++uniqueId);\r\n  @Input('tooltipLabel') tooltipLabel: string = 'Label ' + uniqueId;\r\n  @Input('tooltipAriaLabel') tooltipAriaLabel: string = this.tooltipLabel + '. Open tooltip';\r\n  @ViewChild('tooltipContainer', { static: true }) tooltipContainer: ElementRef;\r\n\r\n  contentOpen: boolean = false;\r\n\r\n  constructor(private renderer: Renderer2) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  closeTooltip() {\r\n    this.contentOpen = false;\r\n  }\r\n\r\n  @HostListener('window:scroll')\r\n  onScroll() {\r\n    this.updateContainerPos();\r\n  }\r\n\r\n  updateContainerPos() {\r\n    let top = (<HTMLElement>document.getElementById(this.tooltipId)).getBoundingClientRect().top;\r\n    let height = window.innerHeight;\r\n    this.renderer.setStyle(this.tooltipContainer.nativeElement, 'bottom', (height - top) + 16 + 'px');\r\n\r\n    let left = (<HTMLElement>document.getElementById(this.tooltipId)).getBoundingClientRect().left;\r\n    let width = this.tooltipContainer.nativeElement.getBoundingClientRect().width;\r\n    this.renderer.setStyle(this.tooltipContainer.nativeElement, 'left', left - (width / 2) + 'px');\r\n  }\r\n\r\n  toggleTooltip() {\r\n    this.contentOpen = !this.contentOpen;\r\n    if (!this.contentOpen) {\r\n      (<HTMLElement>document.getElementById(this.tooltipId)).focus();\r\n    } else {\r\n      setTimeout(() => {\r\n        this.updateContainerPos();\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keydown.escape')\r\n  onKeydownHandler() {\r\n    this.closeTooltip();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label [for]=\"tooltipId\" class=\"sm-tooltip--label\" [innerHtml]=\"tooltipLabel\"></label>\r\n<button [id]=\"tooltipId\" class=\"sm-tooltip--btn\" (click)=\"toggleTooltip();\" [attr.aria-label]=\"tooltipAriaLabel\">\r\n  <span *ngIf=\"contentOpen\" class=\"sm-tooltip--chevron\"></span>\r\n</button>\r\n<div #tooltipContainer [hidden]=\"!contentOpen\" role=\"tooltip\" aria-live=\"assertive\" class=\"sm-tooltip--container\">\r\n  <span class=\"sr-only\">Tooltip popup</span>\r\n  <ng-content></ng-content>\r\n  <button aria-hidden=\"true\" class=\"sm-tooltip--container__close\" (click)=\"toggleTooltip();\"></button>\r\n</div>"
        }
    ],
    "modules": [
        {
            "name": "SMComponentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SMButtonComponent"
                        },
                        {
                            "name": "SMCardsBodyComponent"
                        },
                        {
                            "name": "SMCardsComponent"
                        },
                        {
                            "name": "SMCardsFooterComponent"
                        },
                        {
                            "name": "SMCardsHeaderComponent"
                        },
                        {
                            "name": "SMCheckboxComponent"
                        },
                        {
                            "name": "SMCheckboxComponentWrapper"
                        },
                        {
                            "name": "SMDrawerComponent"
                        },
                        {
                            "name": "SMInputComponent"
                        },
                        {
                            "name": "SMRadioButton"
                        },
                        {
                            "name": "SMRadioGroupComponent"
                        },
                        {
                            "name": "SMSideNavComponent"
                        },
                        {
                            "name": "SMTabComponent"
                        },
                        {
                            "name": "SMTabContentComponent"
                        },
                        {
                            "name": "SMTabsComponent"
                        },
                        {
                            "name": "SMToggleComponent"
                        },
                        {
                            "name": "SMToggleComponentWrapper"
                        },
                        {
                            "name": "SMTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SMDatePickerModule"
                        },
                        {
                            "name": "SMModalModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SMButtonComponent"
                        },
                        {
                            "name": "SMCardsBodyComponent"
                        },
                        {
                            "name": "SMCardsComponent"
                        },
                        {
                            "name": "SMCardsFooterComponent"
                        },
                        {
                            "name": "SMCardsHeaderComponent"
                        },
                        {
                            "name": "SMCheckboxComponent"
                        },
                        {
                            "name": "SMCheckboxComponentWrapper"
                        },
                        {
                            "name": "SMDatePickerModule"
                        },
                        {
                            "name": "SMDrawerComponent"
                        },
                        {
                            "name": "SMInputComponent"
                        },
                        {
                            "name": "SMModalModule"
                        },
                        {
                            "name": "SMRadioButton"
                        },
                        {
                            "name": "SMRadioGroupComponent"
                        },
                        {
                            "name": "SMSideNavComponent"
                        },
                        {
                            "name": "SMTabComponent"
                        },
                        {
                            "name": "SMTabContentComponent"
                        },
                        {
                            "name": "SMTabsComponent"
                        },
                        {
                            "name": "SMToggleComponent"
                        },
                        {
                            "name": "SMToggleComponentWrapper"
                        },
                        {
                            "name": "SMTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SMDatePickerModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SMButtonComponent"
                        },
                        {
                            "name": "SMCardsBodyComponent"
                        },
                        {
                            "name": "SMCardsComponent"
                        },
                        {
                            "name": "SMCardsFooterComponent"
                        },
                        {
                            "name": "SMCardsHeaderComponent"
                        },
                        {
                            "name": "SMCheckboxComponent"
                        },
                        {
                            "name": "SMCheckboxComponentWrapper"
                        },
                        {
                            "name": "SMDrawerComponent"
                        },
                        {
                            "name": "SMInputComponent"
                        },
                        {
                            "name": "SMRadioButton"
                        },
                        {
                            "name": "SMRadioGroupComponent"
                        },
                        {
                            "name": "SMSideNavComponent"
                        },
                        {
                            "name": "SMTabComponent"
                        },
                        {
                            "name": "SMTabContentComponent"
                        },
                        {
                            "name": "SMTabsComponent"
                        },
                        {
                            "name": "SMToggleComponent"
                        },
                        {
                            "name": "SMToggleComponentWrapper"
                        },
                        {
                            "name": "SMTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SMButtonComponent"
                        },
                        {
                            "name": "SMCardsBodyComponent"
                        },
                        {
                            "name": "SMCardsComponent"
                        },
                        {
                            "name": "SMCardsFooterComponent"
                        },
                        {
                            "name": "SMCardsHeaderComponent"
                        },
                        {
                            "name": "SMCheckboxComponent"
                        },
                        {
                            "name": "SMCheckboxComponentWrapper"
                        },
                        {
                            "name": "SMDrawerComponent"
                        },
                        {
                            "name": "SMInputComponent"
                        },
                        {
                            "name": "SMRadioButton"
                        },
                        {
                            "name": "SMRadioGroupComponent"
                        },
                        {
                            "name": "SMSideNavComponent"
                        },
                        {
                            "name": "SMTabComponent"
                        },
                        {
                            "name": "SMTabContentComponent"
                        },
                        {
                            "name": "SMTabsComponent"
                        },
                        {
                            "name": "SMToggleComponent"
                        },
                        {
                            "name": "SMToggleComponentWrapper"
                        },
                        {
                            "name": "SMTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SMModalModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "SMModalBodyComponent"
                        },
                        {
                            "name": "SMModalComponent"
                        },
                        {
                            "name": "SMModalFooterComponent"
                        },
                        {
                            "name": "SMModalHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SMModalBodyComponent"
                        },
                        {
                            "name": "SMModalComponent"
                        },
                        {
                            "name": "SMModalFooterComponent"
                        },
                        {
                            "name": "SMModalHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n    SMButtonComponent,\r\n    SMInputComponent,\r\n    SMTabComponent,\r\n    SMTabsComponent,\r\n    SMTabContentComponent,\r\n    SMCardsComponent,\r\n    SMCardsHeaderComponent,\r\n    SMCardsBodyComponent,\r\n    SMCardsFooterComponent,\r\n    SMRadioButton,\r\n    SMRadioGroupComponent,\r\n    SMCheckboxComponent,\r\n    SMCheckboxComponentWrapper,\r\n    SMToggleComponent,\r\n    SMToggleComponentWrapper,\r\n    SMTooltipComponent,\r\n    SMDrawerComponent,\r\n    SMSideNavComponent,\r\n  ]"
            },
            {
                "name": "components",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  DatePickerComponent,\r\n  DatePickerInputComponent,\r\n  DatePickerCalendarComponent,\r\n  CalendarNavComponent,\r\n  CalendarDayViewComponent,\r\n  CalendarYearViewComponent,\r\n  SMDayViewDate,\r\n  SMDatePipe\r\n]"
            },
            {
                "name": "comps",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/modal/modal.module.ts",
                "type": "[]",
                "defaultValue": "[\r\n  SMModalComponent,\r\n  SMModalHeaderComponent,\r\n  SMModalBodyComponent,\r\n  SMModalFooterComponent\r\n]"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "disableWeekends",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date.filters.ts",
                "type": "DatePickerDisableDateFilter",
                "defaultValue": "(\r\n  day: Moment\r\n): boolean => {\r\n  if (day) return day.day() === 6 || day.day() === 0;\r\n  else return false;\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/sm-date.pipe.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "moment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
                "type": "",
                "defaultValue": "moment_"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/CTA.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/CTA.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/CTA.stories.ts",
                "type": "Story<SMButtonComponent>",
                "defaultValue": "(args: SMButtonComponent) => ({\n  props: args,\n  template: `<sm-button type=${args.type}> Click me</sm-button>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Tertiary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/CTA.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/button/button.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/input/input.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "uniqueId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/tooltip/tooltip.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "uniqueID",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/drawer/drawer.component.ts",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "uniqueInputId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "type": "number",
                "defaultValue": "0"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "DatePickerDisableDateFilter",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "projects/components/src/lib/components/datepicker/date.filters.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "DateType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Date | Moment | number",
                "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "DrawerPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"undefined\"",
                "file": "projects/components/src/lib/components/drawer/drawer.component.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/components/src/lib/components.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n    SMButtonComponent,\r\n    SMInputComponent,\r\n    SMTabComponent,\r\n    SMTabsComponent,\r\n    SMTabContentComponent,\r\n    SMCardsComponent,\r\n    SMCardsHeaderComponent,\r\n    SMCardsBodyComponent,\r\n    SMCardsFooterComponent,\r\n    SMRadioButton,\r\n    SMRadioGroupComponent,\r\n    SMCheckboxComponent,\r\n    SMCheckboxComponentWrapper,\r\n    SMToggleComponent,\r\n    SMToggleComponentWrapper,\r\n    SMTooltipComponent,\r\n    SMDrawerComponent,\r\n    SMSideNavComponent,\r\n  ]"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker.module.ts": [
                {
                    "name": "components",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  DatePickerComponent,\r\n  DatePickerInputComponent,\r\n  DatePickerCalendarComponent,\r\n  CalendarNavComponent,\r\n  CalendarDayViewComponent,\r\n  CalendarYearViewComponent,\r\n  SMDayViewDate,\r\n  SMDatePipe\r\n]"
                }
            ],
            "projects/components/src/lib/components/modal/modal.module.ts": [
                {
                    "name": "comps",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/modal/modal.module.ts",
                    "type": "[]",
                    "defaultValue": "[\r\n  SMModalComponent,\r\n  SMModalHeaderComponent,\r\n  SMModalBodyComponent,\r\n  SMModalFooterComponent\r\n]"
                }
            ],
            "projects/components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/components/src/lib/components/datepicker/date.filters.ts": [
                {
                    "name": "disableWeekends",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date.filters.ts",
                    "type": "DatePickerDisableDateFilter",
                    "defaultValue": "(\r\n  day: Moment\r\n): boolean => {\r\n  if (day) return day.day() === 6 || day.day() === 0;\r\n  else return false;\r\n}"
                }
            ],
            "stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                },
                {
                    "name": "uniqueInputId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/lib/components/datepicker/sm-date.pipe.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/sm-date.pipe.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts": [
                {
                    "name": "moment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
                    "type": "",
                    "defaultValue": "moment_"
                }
            ],
            "stories/CTA.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/CTA.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/CTA.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/CTA.stories.ts",
                    "type": "Story<SMButtonComponent>",
                    "defaultValue": "(args: SMButtonComponent) => ({\n  props: args,\n  template: `<sm-button type=${args.type}> Click me</sm-button>`,\n})"
                },
                {
                    "name": "Tertiary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/CTA.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/components/src/lib/components/button/button.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/button/button.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/lib/components/input/input.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/input/input.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/lib/components/tooltip/tooltip.component.ts": [
                {
                    "name": "uniqueId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/tooltip/tooltip.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ],
            "projects/components/src/lib/components/drawer/drawer.component.ts": [
                {
                    "name": "uniqueID",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/components/src/lib/components/drawer/drawer.component.ts",
                    "type": "number",
                    "defaultValue": "0"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/components/src/lib/components/datepicker/date.filters.ts": [
                {
                    "name": "DatePickerDisableDateFilter",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "projects/components/src/lib/components/datepicker/date.filters.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "projects/components/src/lib/components/datepicker/date-picker.component.ts": [
                {
                    "name": "DateType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Date | Moment | number",
                    "file": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "projects/components/src/lib/components/drawer/drawer.component.ts": [
                {
                    "name": "DrawerPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\" | \"undefined\"",
                    "file": "projects/components/src/lib/components/drawer/drawer.component.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "projects/components/src/lib/components.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/button/button.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMCardsBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMCardsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMCardsFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMCardsHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMCheckboxComponentWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/checkbox/checkbox.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SMCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarDayViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/52",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SMDayViewDate",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CalendarDay",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-day-view/calendar-day-view.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-nav/calendar-nav.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CalendarYearViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Year",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/calendar-year-view/calendar-year-view.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-calendar/date-picker-calendar.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/40",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker-input/date-picker-input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/69",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueInputId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date-picker.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "components",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/date.filters.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disableWeekends",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/sm-date.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "SMDatePipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/datepicker/sm-date.pipe.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "moment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/drawer/drawer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMDrawerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/drawer/drawer.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueID",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/input/input.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMModalBodyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMModalFooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/modal/modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMModalHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/modal/modal.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "comps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMRadioButton",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMRadioGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/side-nav/side-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMSideNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/tabs/tab-content/tab-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMTabContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/tabs/tab/tab.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/tabs/tabs.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMTabsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMToggleComponentWrapper",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/toggle/toggle.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "SMToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SMTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/lib/components/tooltip/tooltip.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "uniqueId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/CTA.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/CTA.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/CTA.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/CTA.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tertiary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            }
        ]
    }
}